<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://broadhop.com/unifiedapi/soap/types" xmlns:html="http://www.w3.org/1999/xhtml" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://broadhop.com/unifiedapi/soap/types">
  <xsd:annotation>
    <xsd:documentation>
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="Overview">Overview</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">Unified API version 14.0.0 works with CPS 10.0+</p>
      <h4 xmlns="http://www.w3.org/1999/xhtml">Release Notes</h4>
      <ul xmlns="http://www.w3.org/1999/xhtml">
      <li>CSCve72817 updated API to allow Dates without a timezone offset or Z indicating UTC time.
      </li>
      </ul>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="URLs">Default URLs</h1>
      <h4 xmlns="http://www.w3.org/1999/xhtml">HA</h4>
      <table xmlns="http://www.w3.org/1999/xhtml" class="properties">
        <tr>
          <th>https://lbvip01:8443/ua/soap</th>
          <td>endpoint</td>
        </tr>
        <tr>
          <th>https://lbvip01:8443/ua/wsdl/UnifiedApi.wsdl</th>
          <td>retrieves the WSDL</td>
        </tr>
        <tr>
          <th>https://lbvip01:8443/ua/wsdl/UnifiedApi.xsd</th>
          <td>retrieves the XSD (schema)</td>
        </tr>
      </table>
      <h4 xmlns="http://www.w3.org/1999/xhtml">AIO</h4>
      <table xmlns="http://www.w3.org/1999/xhtml" class="properties">
        <tr>
          <th>http://lbvip01:8080/ua/soap</th>
          <td>endpoint</td>
        </tr>
        <tr>
          <th>http://lbvip01:8080/ua/wsdl/UnifiedApi.wsdl</th>
          <td>retrieves the WSDL</td>
        </tr>
        <tr>
          <th>http://lbvip01:8080/ua/wsdl/UnifiedApi.xsd</th>
          <td>retrieves the XSD (schema)</td>
        </tr>
      </table>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="AuditHistory">Audit History</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">The Audit History is a way to track usage of the various GUIs and APIs it provides to the customer.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">If enabled, each request is submitted to the Audit History database for historical and security purposes. The user who made the request, the entire contents of the request and
        if it is subscriber related (meaning that there is a networkId value), all networkIds are stored as well in a searchable field.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Capped Collection</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">The Audit History uses a 1 GB capped collection in Mongo Db by default. The capped collection automatically
      removes documents when the size restriction threshold is hit. The oldest document is removed as each new document is added.
      For customers who want more than 1 GB of audit data, please contact the assigned Cisco Advanced Services Engineer to get more information.</p>

      <p xmlns="http://www.w3.org/1999/xhtml">Configuration in Policy Builder is done in GB increments. It is possible to enter decimals,
      for example, 9.5 will set the capped collection to 9.5 GB.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>PurgeAuditHistoryRequests</strong>
                <br/>
                When using a capped collection, Mongo Db places a restriction on the database and does not allow the deletion of data from the collection.
                Therefore, the entire collection must be dropped and re-created.
                This means that the <a class="doclink" href="#element_PurgeAuditHistoryRequest">PurgeAuditHistory</a> queries have no impact on capped collections.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>AuditRequests</strong>
                <br/>
        As a consequence of the XSS defense changes to the API standard operation, any XML data sent in an AuditRequest must be properly escaped even if
        inside CDATA tags. For example, &amp;lt;ExampleRequest&amp;gt;...&amp;lt;/ExampleRequest&amp;gt;
        See <a class="doclink" href="#type_AuditType">AuditType</a> for more information.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Operation</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">The Audit History can be turned off, but it is on by default.</p>
      <ul xmlns="http://www.w3.org/1999/xhtml">
        <li>
          <strong>ua.client.submit.audit=true</strong> - property used by Policy Builder and set in /etc/broadhop/pb/pb.conf</li>
        <li>
          <strong>Submit Requests to Audit Log</strong> - Unified API plugin configuration in Policy Builder</li>
      </ul>

      <h5 xmlns="http://www.w3.org/1999/xhtml">Initial Setup</h5>

      <p xmlns="http://www.w3.org/1999/xhtml">There are 3 parts to the Audit History</p>
      <ul xmlns="http://www.w3.org/1999/xhtml">
        <li>Server - database and Unified API</li>
        <li>Policy Builder</li>
        <li>Audit Client - bundle that the Policy Builder uses to send <a class="doclink" href="#element_AuditRequest">Audit</a> requests</li>
      </ul>

      <p xmlns="http://www.w3.org/1999/xhtml">To setup the system</p>
      <ol xmlns="http://www.w3.org/1999/xhtml">
        <li>Start the Policy Builder with the following property: <strong>-Dua.client.submit.audit=false</strong> (set in /etc/broadhop/pb/pb.conf)</li>
        <li>Add and configure the appropriate plugin configurations for Audit History and Unified API</li>
        <li>Publish the Policy Builder configuration</li>
        <li>Start the CPS servers</li>
        <li>Restart the Policy Builder with the following property: <strong>-Dua.client.submit.audit=true</strong> and <strong>-Dua.client.server.url=http://ADDRESS OF SERVER:PORT</strong>
        </li>
      </ol>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Read Requests</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">The Audit History does not log read requests by default.</p>

      <ul xmlns="http://www.w3.org/1999/xhtml">
        <li>GetRefDataBalance</li>
        <li>GetRefDataServices</li>
        <li>GetSubscriber</li>
        <li>GetSubscriberCount</li>
        <li>QueryAuditHistory</li>
        <li>QueryBalance</li>
        <li>QuerySession</li>
        <li>QueryVoucher</li>
        <li>SearchSubscribers</li>
      </ul>

      <p xmlns="http://www.w3.org/1999/xhtml">The Unified API also has a Policy Builder configuration option to log read requests which is set to false by default.</p>
      <h4 xmlns="http://www.w3.org/1999/xhtml">APIs</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">All APIs are automatically logged into the Audit Logging History database, except for <a class="doclink" href="#element_QueryAuditHistoryRequest">QueryAuditHistory</a>
      and <a class="doclink" href="#element_KeepAliveRequest">KeepAlive</a>. All Unified API requests have an added <a class="doclink" href="#type_AuditType">Audit</a> element
      that should be populated to provide proper audit history.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Querying</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">The query is very flexible - it uses regex automatically for the id and dataid, and only one of the following are required: id, dataid, or request.
        The dataid element typically will be the networkId (Credential) value of a subscriber.</p>
      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Disable Regex</strong>
                <br/>
The use of regular expressions for queries can be turned off in the Policy Builder configuration.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <p xmlns="http://www.w3.org/1999/xhtml">The id element is the person or application who made the API request. For example, if a CSR logs into Control Center and queries a subscriber balance, the id will be that CSR's username.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">The dataid element is typically the subscriber's username. For example, if a CSR logs into Control Center and queries a subscriber,
      the id will be that CSR's username, and the dataid will be the subscriber's credential (networkId value). For queries, the dataid value is checked for spaces and then tokenized
      and each word is used as a search parameter. For example, "networkId1 networkId2" is interpreted as two values to check.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">The fromDate represents the date in the past from which to start the purge or query. If the date is null, the api starts at the oldest entry in the history.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">The toDate represents the date in the past to which the purge or query of data includes. If the date is null, the api includes the most recent entry in the purge or query.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Purging</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">The Audit History database is capped at 1 GB by default. Mongo provides a mechanism to do this and then the oldest data is purged as new data is added to the repository. There is also a <a class="doclink" href="#element_PurgeAuditHistoryRequest">PurgeAuditHistory</a> request which can purge data from the repository. It uses the same search parameters as the <a class="doclink" href="#element_QueryAuditHistoryRequest">QueryAuditHistory</a> and therefore is very flexible in how much or how little data is matched for the purge.</p>
      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Regex Queries!</strong>
                <br/>
Be very careful when purging records from the Audit History database. If a value is given for dataid, the server uses regex to match on the dataid value and therefore will match many more records than expected. Use the <a class="doclink" href="#element_QueryAuditHistoryRequest">QueryAuditHistory</a> API to test the query.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h5 xmlns="http://www.w3.org/1999/xhtml">Capped Collections and Purge Requests</h5>
      <p xmlns="http://www.w3.org/1999/xhtml">When using a capped collection, Mongo Db places a restriction on the database and does not allow the deletion of data from the collection. Therefore, the entire collection must be dropped and re-created. This means that the <a class="doclink" href="#element_QueryAuditHistoryRequest">PurgeAuditHistory</a> queries have no impact on capped collections.</p>

      <h5 xmlns="http://www.w3.org/1999/xhtml">Purge History</h5>

      <p xmlns="http://www.w3.org/1999/xhtml">Each purge request is logged after the purge operation completes. This ensures that if the entire repo is destroyed, the purge action that destroyed the repo will be logged.</p>
      <h4 xmlns="http://www.w3.org/1999/xhtml">Control Center</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">The Control Center version 2.0 automatically logs all requests.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Policy Builder</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">The Policy Builder automatically logs all save operations (Publish and Save to Client).</p>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="HTTPKeepAlive">HTTP KeepAlive</h1>

      <h4 xmlns="http://www.w3.org/1999/xhtml">HA</h4>
      <table xmlns="http://www.w3.org/1999/xhtml" class="properties">
        <tr>
          <th>https://lbvip01:8443/ua/soap/keepalive</th>
          <td>Response: &lt;html&gt;&lt;body&gt;&lt;p&gt;Keep Alive&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</td>
        </tr>
      </table>
      <h4 xmlns="http://www.w3.org/1999/xhtml">AIO</h4>
      <table xmlns="http://www.w3.org/1999/xhtml" class="properties">
        <tr>
          <th>http://lbvip01:8080/ua/soap/keepalive</th>
          <td>Response: &lt;html&gt;&lt;body&gt;&lt;p&gt;Keep Alive&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</td>
        </tr>
      </table>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="Dates">Dates</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">Dates are in Zulu/UTC timestamp format. For proper server operation, you must use a consistent timestamp format for all dates in the API requests.</p>

      <p xmlns="http://www.w3.org/1999/xhtml">Parsing format: yyyy-MM-ddTHH:mm:ss[.SSS][Z|(+|-)hh:mm]</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Hijri Dates</strong>
                <br/>
                The Unified API does not support Hijri date translation at this time.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Valid Timestamp Formats</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">These are the valid timestamps based on the parsing format listed above</p>

      <table xmlns="http://www.w3.org/1999/xhtml" class="properties">
        <tr>
          <th>2010-09-30T00:00:00Z</th>
          <td>the Z indicates Zulu/UTC time - the database translates to UTC offset of locale/timezone</td>
        </tr>
        <tr>
          <th>2010-09-30T00:00:00+00:00</th>
          <td>manual inclusion of UTC offset of locale/timezone - the database will store as is</td>
        </tr>
        <tr>
          <th>2010-09-30T00:00:00.000Z</th>
          <td>uses milliseconds for extra specificity of time</td>
        </tr>
        <tr>
          <th>2010-09-30T00:00:00.000+00:00</th>
          <td>uses milliseconds for extra specificity of time</td>
        </tr>
        <tr>
          <th>2010-09-30T00:00:00</th>
          <td>no timezone offset or Z indication - the database translates to UTC offset of locale/timezone unless qns.conf param is set</td>
        </tr>
        <tr>
          <th>2010-09-30T00:00:00.000</th>
          <td>no timezone offset or Z indication and uses milliseconds for extra specificity of time - the database translates to UTC offset of locale/timezone unless qns.conf param is set</td>
        </tr>
      </table>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>No Timezone Offset or Z - qns.conf parameter</strong>
                <br/>
                The Unified API now supports dates that do not include a timezone offset or Z indication for UTC time.
                When a date is sent that does not include a timezone offset or Z, the API assumes Z/UTC unless the following
                qns.conf param is set: <strong>-Dua.date.converter.timezone.offset</strong>. The timezone offset takes the form of (+|-)hh:mm.
                For example, -06:00 is Mountain Daylight Time (MDT) while -07:00 is Mountain Standard Time (MST) and +00:00
                is UTC: <strong>-Dua.date.converter.timezone.offset=-06:00</strong>.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Database Timestamp Translation</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">The database always uses yyyy-MM-ddTHH:mm:ss.SSS(+|-)hh:mm for formatting dates. The database also always translates the datetime to the local server timezone.
        Therefore, the results may be unexpected if you pass the value with the Z format. For example:
        2010-10-15T00:00:00Z produces Thu Oct 14 2010 18:00:00 GMT-06:00 (MDT) in the database instead of Fri Oct 15 2010 00:00:00 GMT-06:00 (MDT) assuming your server is set to North American Mountain Time.
        The reason is that the server reads the timezone of the incoming value as UTC (+00:00 indicated by the Z) and then translates that to the local server timezone which in this example is
        North American Mountain Time or -06:00. Mountain Time is 6 hours before (-) UTC.</p>
      <h4 xmlns="http://www.w3.org/1999/xhtml">Daylight Savings Time</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">Daylight Savings Time adds another wrinkle to the processing of dates and times. In the course of a year, the server timezone will automatically shift from standard time to daylight savings time.
        In our examples, that would be North American Mountain Daylight Savings Time (MST instead of MDT). During that period, the following will happen:</p>

      <p xmlns="http://www.w3.org/1999/xhtml">2010-11-15T00:00:00-06:00 produces Sun Nov 14 2010 23:00:00 GMT-07:00 (MST) in the database</p>
      <p xmlns="http://www.w3.org/1999/xhtml">Because Nov 15th 2010 is after the switch back to Standard time in the Mountain Zone but the database is translating to daylight savings time which is an hour earlier.
        To get Mon Nov 15 2010 00:00:00 GMT-07:00 (MST) during the Daylight Savings portion of the year, you need to pass in 2010-11-15T00:00:00-07:00.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Wikipedia ISO 8601</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">If you want to understand the ISO 8601 standard for date time handling, the following Wikipedia article could be useful.</p>

      <a xmlns="http://www.w3.org/1999/xhtml" href="http://en.wikipedia.org/wiki/ISO_8601">http://en.wikipedia.org/wiki/ISO_8601</a>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="ServicesAndServiceSchedules">Services and Service Schedules</h1>

      <p xmlns="http://www.w3.org/1999/xhtml">Service Schedules use a traditional concept of cron taken from the Quartz package. Quartz documents cron <a href="http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html">here</a>. While we are not using the CronTrigger class, the explanation of
        the fields and how the values operate is useful information.</p>

      <p xmlns="http://www.w3.org/1999/xhtml">We essentially are trying to model a start and end date and a start and end time using the XML structure shown below.
      We do not deal with seconds or milliseconds which cron does. Instead we start at minute specificity. Instead of using pure cron notation, we have a startTime and
      endTime that makes it more human readable. We also use startDate and endDate which along with the start and end times, create the period of time over which the
      service is active. Then the repeat object handles how the schedule repeats within the specified date/timeframe. The repeat elements use actual Quartz cron notation.</p>
      <p>startTime must be before endTime since it represents a range of time within a given day for the service to be active and it is used to build the cron
      object during processing.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Service Evaluation "Gaps" - Seconds/Milliseconds</strong>
                <br/>
                The cron processing appends :59:999 (59 seconds and 999 milliseconds) to the endTime value which means that if you set the endTime to 12:59,
                the cron processing evaluates that as 12 hours 59 minutes 59 seconds and 999 milliseconds. This helps ensure that service evaluation for start and stop
                times does not have any "gaps". This is necessary for processing schedules like in the example below which cross date boundaries.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Crossing Date Boundaries</strong>
                <br/>
                Schedules are tricky because they operate on two levels: <ol>
                  <li>a date period for which the service is active </li>
                  <li>a time period for any given day which
                the service is active, meaning that you cannot cross date boundaries with the startTime and endTime</li>
                </ol>
                <p>The typical gotcha scenario is trying to have a service be active for 24 hours across 2 days - for example, the service starts at 2 am on day 1 and ends at 2 am on day 2.
                </p>
                <p>Most people try to do the following:
                <br/>
                <br/>
                Schedule 1: startDate: 2013-10-03, endDate: 2013-10-04, startTime: 02:00, endTime: 01:59
                </p>
                <p>The above does not work because the endTime is before the startTime which will result in an invalid cron object for processing.
                </p>
                <p>
                Instead, do the following:
                <br/>
                <br/>
                Schedule 1: startDate: 2013-10-03, endDate: 2013-10-03, startTime: 02:00, endTime: 23:59
                <br/>
                Schedule 2: startDate: 2013-10-04, endDate: 2013-10-04, startTime: 00:00, endTime: 01:59
                </p>
                The above sets 2 schedules for the service: the first is valid from 2:00 am to 11:59 pm on October 3rd and the second is valid from 12:00 am to 1:59 am on October 4th.
                This creates a 24 hour active period for the service.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Quartz Documentation</strong>
                <br/>
                As the Quartz <a href="http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html">documentation</a> mentions, dayOfMonth and dayOfWeek are related and only one of the fields can contain ? for any given cron expression.
                <br/>
                dayOfMonth and dayOfWeek both cannot be configured at the same time. Only one parameter can be configured at any given point of time.
                <br/>
                If configuring dayOfWeek, set ? in dayOfMonth as &lt;dayOfMonth&gt;?&lt;/dayOfMonth&gt;.
                If configuring dayOfMonth, set ? in dayOfWeek as &lt;dayOfWeek&gt;?&lt;/dayOfWeek&gt;
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <p xmlns="http://www.w3.org/1999/xhtml">While there is a great of flexibility with the current data structure, it is strongly recommended that you fill in all 4 values if you decide to include a repeat element.</p>
       <div xmlns="http://www.w3.org/1999/xhtml" class="table-wrap" style="width: 30%">
        <table class="generalTable">
          <tbody>
            <th class="generalTh"> field </th>
            <th class="generalTh"> regex </th>
            <th class="generalTh"> default </th>
            <tr>
              <td class="generalTd"> dayOfMonth </td>
              <td class="generalTd"> [\-,0-9\*\?LW/]* </td>
              <td class="generalTd"> * </td>
            </tr>
            <tr>
              <td class="generalTd"> month </td>
              <td class="generalTd"> [\-,0-9\*A-Z/]* </td>
              <td class="generalTd"> * </td>
            </tr>
            <tr>
              <td class="generalTd"> dayOfWeek </td>
              <td class="generalTd"> [\-,0-9\*\?L#/]* </td>
              <td class="generalTd"> ? </td>
            </tr>
            <tr>
              <td class="generalTd"> year </td>
              <td class="generalTd"> [\-,0-9\*/]* </td>
              <td class="generalTd"> * </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="docExample">
        <pre class="example">
&lt;schedule&gt;
  &lt;startDate&gt;2011-01-01T00:00:00Z&lt;/startDate&gt;
  &lt;endDate&gt;2012-01-01T00:00:00Z&lt;/endDate&gt;
  &lt;state&gt;ON&lt;/state&gt;
  &lt;startTime&gt;00:00&lt;/startTime&gt;
  &lt;endTime&gt;23:59&lt;/endTime&gt;
  &lt;repeat&gt;
    &lt;dayOfMonth&gt;*&lt;/dayOfMonth&gt;
    &lt;month&gt;*&lt;/month&gt;
    &lt;dayOfWeek&gt;?&lt;/dayOfWeek&gt;
    &lt;year&gt;*&lt;/year&gt;
  &lt;/repeat&gt;
  &lt;enabled&gt;true&lt;/enabled&gt;
&lt;/schedule&gt;
        </pre>
      </div>

      <p xmlns="http://www.w3.org/1999/xhtml">Possibly the best feature of the schedule definition is that most of it contains defaults, so you only need to define a start date and if it's enabled, and you will have a schedule that operates forever from the start date, 24 hours a day.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="docExample">
        <pre class="example">
&lt;schedule&gt;
  &lt;startDate&gt;2011-01-01T00:00:00Z&lt;/startDate&gt;
  &lt;enabled&gt;true&lt;/enabled&gt;
&lt;/schedule&gt;
        </pre>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">State</h4>

      <p xmlns="http://www.w3.org/1999/xhtml">State is an additional layer of configuration that helps determine how to interpret the schedule. As noted above, the enabled field indicates whether the service is active or not. The state field indicates whether the time/date and cron values evaluate from a positive or negative perspective.</p>

      <div xmlns="http://www.w3.org/1999/xhtml">
<strong>Example:</strong>
state == ON, date range Jan 2000 - Jan 2001, time range = 9AM-5PM

      <div class="docExample">
        <pre class="example">
&lt;schedule&gt;
  &lt;startDate&gt;2000-01-01T00:00:00Z&lt;/startDate&gt;
  &lt;endDate&gt;2001-01-31T00:00:00Z&lt;/endDate&gt;
  &lt;state&gt;ON&lt;/state&gt;
  &lt;startTime&gt;09:00&lt;/startTime&gt;
  &lt;endTime&gt;17:00&lt;/endTime&gt;
  &lt;enabled&gt;true&lt;/enabled&gt;
&lt;/schedule&gt;
        </pre>
      The above evaluates as: if at the time of evaluation the date is within range and the time is within the time range, the Policy Engine will
      return serviceActive=true and the Policy Engine will turn the service on or keep it on if already started for the subscriber.
      </div>
      </div>
      <p xmlns="http://www.w3.org/1999/xhtml"/>
      <div xmlns="http://www.w3.org/1999/xhtml">
<strong>Example:</strong>
state == OFF, date range Jan 2000 - Jan 2001, time range = 9AM-5PM

      <div class="docExample">
        <pre class="example">
&lt;schedule&gt;
  &lt;startDate&gt;2000-01-01T00:00:00Z&lt;/startDate&gt;
  &lt;endDate&gt;2001-01-31T00:00:00Z&lt;/endDate&gt;
  &lt;state&gt;OFF&lt;/state&gt;
  &lt;startTime&gt;09:00&lt;/startTime&gt;
  &lt;endTime&gt;17:00&lt;/endTime&gt;
  &lt;enabled&gt;true&lt;/enabled&gt;
&lt;/schedule&gt;
        </pre>
      The above evaluates as: if at the time of evaluation the date is within range and the time is within range, the Policy Engine will return
      serviceActive=false and the Policy Engine will turn the service off.
      </div>
      </div>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="CustomSearchParams">Custom Search Params</h1>

      <p xmlns="http://www.w3.org/1999/xhtml">The basic search provides for name and credential matching. However, there is a large data structure that can be matched against.
        The data objects are structured as a large HashMap or KEY:VALUE pairs. Lists of HashMaps can be included as well. An industry-standard term for KEY:VALUE pairs is Attribute:Value pairs or AVPs.
        That is why the SearchSubscribersRequest uses "avp" as the element tag for complex search parameters. Currently, the Search views all parameters as an AND operation.</p>

      <p xmlns="http://www.w3.org/1999/xhtml">Each avp contains 2 children: code and value. The Code represents the KEY in the data HashMap, and the Value is the VALUE associated to that KEY in the data HashMap.
      For example, the following code block represented in JSON (JavaScript Object Notation) shows some of the key data points of a Subscriber.</p>

      <p xmlns="http://www.w3.org/1999/xhtml">We have tried to be consistent and append "_key" to the KEY portion of the KEY:VALUE pair. Notice that version_key is the KEY for an integer value,
      and that services_key is the KEY for a List of "services". Each service is also a HashMap of KEY:VALUE pairs.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>NoSQL</strong>
                <br/>
                It's important to note that the CPS database is a NoSQL database. It does not use tables and columns to structure the data.
                Because each record is a "document" (which is a HashMap of HashMaps), you can access keys in the same way you access properties in JavaScript with dot notation.
                In the example below, if you want to find subscribers who have the service AVP whose code is AVP_CODE use <html:strong>services_key.avps_key.code_key</html:strong>.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="docExample">
        <pre class="example">
    { "_id_key" : null,
    "version_key" : 0,
    "services_key" : [
        {
            "code_key" : "GOLD",
            "enabled_key" : true,
            "avps_key" : [
                {
                    "code_key" : "AVP_CODE",
                    "value_key" : "AVP_VALUE"
                },
                {
                    "code_key" : "AVP_CODE_2",
                    "value_key" : "AVP_VALUE"
                }
            ]
        }
    ],
    "name_key" : { "full_name_key" : [ "Test", "Subscriber" ] },
    "status_key" : "ACTIVE",
    "credentials_key" : [
        {
            "network_id_key" : "networkId1",
            "password_key" : "password",
            "expiration_date_key" : null
        }
    ],
    "avps_key" : [
        {
            "code_key" : "SUBSCRIBER_AVP_CODE",
            "value_key" : "SUBSCRIBER_AVP_VALUE",
        }
    ]
    }
        </pre>
      </div>


      <p xmlns="http://www.w3.org/1999/xhtml"/>
      <div xmlns="http://www.w3.org/1999/xhtml">
<strong>Example:</strong>
Name:Test Subscriber, Services:GOLD, and status:ACTIVE. Notice how you have to drill-down to the Service name or code as "services_key.code_key"

      <div class="docExample">
        <pre class="example">
&lt;se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/"&gt;
  &lt;se:Body&gt;
    &lt;SearchSubscribersRequest xmlns="http://broadhop.com/unifiedapi/soap/types"&gt;
      &lt;filter&gt;
        &lt;name&gt;
          &lt;fullName&gt;Test Subscriber&lt;/fullName&gt;
        &lt;/name&gt;
        &lt;avp&gt;
          &lt;code&gt;services_key.code_key&lt;/code&gt;
          &lt;value&gt;GOLD&lt;/value&gt;
        &lt;/avp&gt;
        &lt;avp&gt;
          &lt;code&gt;status_key&lt;/code&gt;
          &lt;value&gt;ACTIVE&lt;/value&gt;
        &lt;/avp&gt;
      &lt;/filter&gt;
    &lt;/SearchSubscribersRequest&gt;
  &lt;/se:Body&gt;
&lt;/se:Envelope&gt;
        </pre>
      </div>
      </div>
      <p xmlns="http://www.w3.org/1999/xhtml"/>
<div xmlns="http://www.w3.org/1999/xhtml">
<strong>Example:</strong>
Services:GOLD and Rate Plan:6MO_DISCOUNT. This should return all users who have the Gold Service and the 6 month discounted payment plan.

      <div class="docExample">
        <pre class="example">
&lt;se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/"&gt;
  &lt;se:Body&gt;
    &lt;SearchSubscribersRequest xmlns="http://broadhop.com/unifiedapi/soap/types"&gt;
      &lt;filter&gt;
        &lt;avp&gt;
          &lt;code&gt;services_key.code_key&lt;/code&gt;
          &lt;value&gt;GOLD&lt;/value&gt;
        &lt;/avp&gt;
        &lt;avp&gt;
          &lt;code&gt;billing_info_key.rate_plan_code_key&lt;/code&gt;
          &lt;value&gt;6MO_DISCOUNT&lt;/value&gt;
        &lt;/avp&gt;
      &lt;/filter&gt;
    &lt;/SearchSubscribersRequest&gt;
  &lt;/se:Body&gt;
&lt;/se:Envelope&gt;
        </pre>
      </div>
      </div>
      <p xmlns="http://www.w3.org/1999/xhtml"/>
      <div xmlns="http://www.w3.org/1999/xhtml">
<strong>Example:</strong>
AVP:UPLINK. This should return all users who have an AVP with code = uplink.

      <div class="docExample">
        <pre class="example">
&lt;se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/"&gt;
  &lt;se:Body&gt;
    &lt;SearchSubscribersRequest xmlns="http://broadhop.com/unifiedapi/soap/types"&gt;
      &lt;filter&gt;
        &lt;avp&gt;
          &lt;code&gt;avps_key.code_key&lt;/code&gt;
          &lt;value&gt;SUBSCRIBER_AVP_CODE&lt;/value&gt;
        &lt;/avp&gt;
      &lt;/filter&gt;
    &lt;/SearchSubscribersRequest&gt;
  &lt;/se:Body&gt;
&lt;/se:Envelope&gt;
        </pre>
      </div>
      </div>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="BalanceEngineThresholds">Balance Engine Thresholds</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">The Threshold table in Policy Builder defines thresholds that trigger messages when quota is credited/debited and therefore
      qualifies as breached/unbreached. These messages are sent back to the Policy Engine from MSBM on Credit, Debit, Charge, and Provision
      functions so that a policy can make decisions and take actions based on the threshold breach. When breached, the current amount is reported.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">Thresholds can be defined for an Account Balance Template (monitors all child quotas as an aggregate)
      and for a Quota Template (only monitors the credits of that quota). Thresholds operate against the total of all currently valid credits under the specified balance/quota.
      A currently valid credit is a credit for which the start date is before the current date/time and the end date is after the current date/time.
      </p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Threshold Calculation</strong>
                <br/>
                Thresholds are based on charged amounts. Reserved amounts are not included.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Example</h4>
      <ul xmlns="http://www.w3.org/1999/xhtml">
       <li>A Subscriber has a credit of 1 GB that ends on Oct 15th</li>
       <li>The system is configured with a Percentage threshold of 90% on a Balance template</li>
       <li>The Subscriber uses 922 MB of credit</li>
       <li>The threshold has been crossed: 922 MB is 90% of 1024 MB (1 GB)</li>
       <li>The Subscriber purchases more credit that ends on Oct 30th - another 1 GB is credited</li>
       <li>The threshold is recalculated and is now at 45%. The calculation formula is: ((amount charged / the original credit amount) * 100)
       In this case, (922 MB / 2048 MB) * 100</li>
       <li>However, once the date passes Oct 15th, the first credit expires and is no longer used in the threshold calculation. As a result, if the Subscriber
       has not used any more quota, the threshold will be calculated at 0% - (0 MB / 1024) * 100</li>
      </ul>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Determing The Calculation Values</strong>
                <br/>
                The original amount that a threshold is compared against can be determined using the sum of balanceTotal + debitedTotal + reservedTotal returned in a QueryBalance request.
                The amount charged is the debitedTotal. Percentage thresholds are calculated as (debitedAmount/(balanceTotal + debitedTotal + reservedTotal)) * 100.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Reference Data vs. Subscriber Specific</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">Reference Data thresholds (RDT) are defined on the Balance or Quota Template to which they apply in Policy Builder. They
      are system or global thresholds and are applied to all subscribers who have purchased the related Balance or Quota package.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">Subscriber Specific thresholds (SST) are defined via API or Policy Action.
      SSTs are only applicable for the subscriber for which the SST was defined.
      You must defined the SST individually for each subscriber for whom you want the threshold to apply.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Unique Names</strong>
                <br/>
                Thresholds must have unique names. SSTs and RDTs must have unique names as well. You can use the same SST code name for multiple subscribers, but that value
                must be unique compared to the name values for the RDTs.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Reduction of Reservation Granted Amounts</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">A threshold defined on an Account Balance Template does reduce the reservation amount as it nears the threshold.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">A threshold defined on a Quota Template does NOT reduce the reservation amount as it nears the threshold.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">When the reservation granted amount is reduced from the requested amount due to a threshold,
the quota granted is reduced to the amount between the current usage level and the value where the threshold would be breached.
This reduction continues on each successive reservation until the Default Minimum Dosage defined on the Balance Plugin Configuration is reached.
After that value is reached for the granted amount, the next reservation will go back to normal behavior and trigger the breach occurred condition.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Soft Thresholds</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">All thresholds in CPS are soft thresholds.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">A soft threshold allows the Balance Engine to grant the minimum dosage even though it could cause the subscriber's balance to breach a threshold.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Threshold Groups</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">It is possible to group thresholds so that they operate in concert. By adding a group name in the Policy Builder configuration, thresholds in the same group are
      evaluated in the order they appear in the table (top to bottom). The Balance Engine will then only send notifications to the Policy Engine for the first threshold breach found.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">Example</h4>
      <ul xmlns="http://www.w3.org/1999/xhtml">
       <li>The system is configured with three Percentage thresholds on a Balance template: 80%, 60% and 50% in descending order</li>
       <li>All three thresholds are grouped, for example, CPSPercents</li>
       <li>When a Subscriber's usage gets to 62%, the Balance Engine will only send notifications for the 60% threshold</li>
       <li>Once the Subscriber's usage goes above 80%, the Balance Engine will only send notifications for the 80% threshold and will not send notifications for the 60% or 50%</li>
      </ul>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Threshold Group Order</strong>
                <br/>
                Threshold group processing is based on the actual order of the thresholds in the Policy Builder configuration table NOT on the highest value.
                For example, if there are 2 thresholds: 60% and 80% and the 60% threshold is the top or first one listed, then notifications for the 80% threshold
                will never get sent. However, if the thresholds are defined as amount remaining instead of amount used (amount used is the default), then
                notifications for the 80% threshold will get processed and sent.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="BillCycle">Bill Cycle</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">Recurring Quota now has the concept of Bill Cycle. If you decide to use a Bill Cycle Quota, it supercedes
      the use of manually setting Recurring Refresh dates. See <a href="#doc_LastRecurringRefresh">Last Recurring Refresh (LRR)</a> for more information.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Converting Recurring Quota to Bill Cycle</strong>
                <br/>
                It is possible to change a Recurring Quota template to use Bill Cycle. For an existing subscriber, the LRR date is used going forward
                but the recurrence frequency and all other behaviors for the quota are then based on the Bill Cycle definition and are implemented during
                the next refresh. Existing subscribers cannot have 29, 30, or 31 as their Bill Cycle refresh date using a converted quota.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <p xmlns="http://www.w3.org/1999/xhtml">Bill Cycle values are 1 - 31 inclusive.</p>

      <h4 xmlns="http://www.w3.org/1999/xhtml">29th, 30th, and 31st</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">
        Compared to LRR, Bill Cycle handles the end of month problem in a much more intuitive manner. If the LRR is set to the 29th, 30th, or 31st with a Recurring Quota, the LRR gets changed to 28 on the next refresh.
        Whereas, if the bill cycle day for a Bill Cycle Quota is set to 30 the refresh in February, for example, will be on the 28th or on the 29th in a leap year. However, in any other month,
         the refresh will happen on the 30th as expected.
      </p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Updating Bill Cycle</strong>
                <br/>
                Bill cycle can be changed by <a class="doclink" href="#element_ChangeBillCycleRequest">ChangeBillCycleRequest</a> API.
                <br/>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>ChangeRecurringRefreshDay API</strong>
                <br/>
                Do not use the <a class="doclink" href="#element_ChangeRecurringRefreshDayRequest">ChangeRecurringRefreshDay</a> API with Bill Cycle Quotas, instead use <a class="doclink" href="#element_ChangeBillCycleRequest">ChangeBillCycleRequest</a>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Recurrence Frequency Amount</strong>
                <br/>
                For a regular Recurring Quota, the Recurrence Frequency Amount (RFA) field adds an additional layer of control to when the quota refreshes.
                If the RFA is set to 2, then refresh will wait 2 periods before refreshing the quota. This way you could have quota refresh every 2 months instead
                of every month. For Bill Cycle Quota, the Recurrence Frequency Amount (RFA) is ignored. Refresh happens once every bill cycle.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="LastRecurringRefresh">Last Recurring Refresh (LRR)</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">Recurring Quota uses the concept of Last Recurring Refresh (LRR) to properly calculate the refresh of the recurring quota.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">LRR is the date that a recurring quota was provisioned or last refreshed by the Balance engine. It is the date that the system uses to determine the next time a recurring quota should be refreshed.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Monthly Recurring Quota</strong>
                <br/>
                Be particularly careful setting this manually with a recurring quota if the refresh frequency is set to monthly. A month is not 30 days.
                When set to monthly, an actual month is used for the calculations and this does vary depending on which month you are doing this in as well as other factors like Daylight Savings Time.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <p xmlns="http://www.w3.org/1999/xhtml">
        <strong>Refreshed</strong> means a new credit will be created automatically on the next Balance action after the LRR + template recurrence frequency (the value of this calculation equals the Next Refresh Date).
      For example, if a recurring quota is defined as monthly and the LRR is "Wed Mar 28 2012 15:05:11 GMT-0600 (MDT)" (typically this will also be the start date of the corresponding credit), then the next refresh will occur on or after "Fri Apr 27 2012 15:05:11 GMT-0600 (MDT)"
      which should typically be the end date of the corresponding credit.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">The refresh occurs on the next Balance action instead of on the actual next refresh date so that not all subscriber accounts refresh at the exact same moment, thus balancing load and resources.
      However, it should be noted that the date of the new credit created by the refresh will still have its dates based on the actual stored LRR and not on when it is actually refreshed by the Balance engine.
      The new credit will have a start date equal to the new LRR after the refresh has occurred. The new credit end date will be the start date + recurrence frequency. This value is also the new Next Refresh Date.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">The LRR can be overridden in the <a class="doclink" href="#element_CreateBalanceRequest">CreateBalance</a> or <a class="doclink" href="#element_ChangeRecurringRefreshDayRequest">ChangeRecurringRefreshDay</a> or <a class="doclink" href="#element_ChangeBillCycleRequest">ChangeBillCycle</a> APIs.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Override LRR</strong>
                <br/>
                If you override LRR, make sure that the start date and end date align properly. To do this consistently, set the startDate value the same as the LRR. This will ensure that the endDate equals the next refresh date
                (LRR + template recurrence frequency) so that the provisioned credit ends when the refresh (new credit is created) occurs.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml">29th, 30th, and 31st</h4>
      <ul xmlns="http://www.w3.org/1999/xhtml">
        <li>If the LRR is set to the 29th, 30th, or 31st, it will remain at the date until the first refresh and/or rollover event, then the LRR will be set to the 28th.</li>
        <li>Customers should be encouraged to not use dates of the 29th, 30th, or 31st, particularly if this is tied to their billing.</li>
        <li>Customer should be informed that while they can provision on the 29th, 30th, or 31st, the refresh date will "float" to the 28th the next month. </li>
      </ul>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>30 days vs 1 month</strong>
                <br/>
                If you use a number of days, for example 30, instead of 1 month, the Balance engine will refresh on the exact number of days, but that will cause the refresh date to "float" to a different day of the month
                every month since no two consecutive months have the same number of days (except July and August).
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="IdParentIdVersion">Id, ParentId and Version</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">These fields require special handling. Do not modify id, parentId, and version at all for any reason.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">These fields are marked as optional in the schema because the Unified API re-uses objects - in particular the subscriber object in creates and updates. If the id, for example, which represents the database generated id value was a required
      field, then the CreateSubscriber call would require a value. This does not make sense since the subscriber object is not yet in the databse.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">The version field is used for optimistic locking, since MongoDB does not implement it. Optimistic locking is the concept of managing concurrent updates to objects using a value that increments in a known way for each modification.
      If the version field does not match the expected value on update, it is assumed that another thread modified the object and therefore the data is now "dirty".</p>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="XSS">XSS - Cross Site Scripting Defense</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">Each incoming request is now checked for dangerous characters and code.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">Two regexes are used to check each request:
      <ul>
        <li>^.*?(?:[^\\p{L}\\p{Nd}\\p{Nl}!@#-_/:\"'\\s={}\\+]|[$^()\\\\]|([&amp;](?!(amp|apos|gt|lt|quot)[;]))|(?&lt;!([&amp;](amp|apos|gt|lt|quot)))[;])+.*?$</li>
        <li>&lt;!\\[CDATA\\[.*?[&lt;&gt;].*?(?!\\]\\]&gt;)</li>
      </ul>
      </p>
      <p xmlns="http://www.w3.org/1999/xhtml">The first regex returns true if the request contains any characters that are not word characters, !@#-_/:"' or white space or
      if the request contains any of these characters $^&amp;();\ The first regex allows &amp; and ; if they are part of the XML 1.0 valid entities (amp,apos,gt,lt,quot).
      The second regex checks if &lt;&gt; are inside CDATA tags. Another way to explain the two
      regexes is that the following characters are allowed: alphanumeric including unicode for other languages, white space, valid XML 1.0 entities, .!@#-_/:"'?*[]={}+,% and &lt;&gt; except when inside CDATA tags.<br/>
      For example, this is a valid request:
      &lt;CreateSubscriberRequest&gt;&lt;subscriber&gt;&lt;credential&gt;&lt;networkId&gt;&lt;![CDATA[testcredential]]&gt;&lt;/networkId&gt;&lt;/credential&gt;&lt;service&gt;&lt;code&gt;GOLD&lt;/code&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/service&gt;&lt;status&gt;ACTIVE&lt;/status&gt;&lt;/subscriber&gt;&lt;/CreateSubscriberRequest&gt;<br/>
      This is an invalid request:
      &lt;CreateSubscriberRequest&gt;&lt;subscriber&gt;&lt;credential&gt;&lt;networkId&gt;&lt;![CDATA[&lt;script alert(document.cookie);&gt;]]&gt;&lt;/networkId&gt;&lt;/credential&gt;&lt;service&gt;&lt;code&gt;GOLD&lt;/code&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/service&gt;&lt;status&gt;ACTIVE&lt;/status&gt;&lt;/subscriber&gt;&lt;/CreateSubscriberRequest&gt;<br/>
      </p>
      <p xmlns="http://www.w3.org/1999/xhtml">See <a href="#doc_CDATA">CDATA</a> for more information about using CDATA tags and XML entities with the Unified API.</p>
      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Data Compatibility</strong>
                <br/>
                Please note that because of the XSS restriction in the API, a deployment should only use the allowed character set for all
      configuration in Policy Builder to make sure that all data is compatible. It is possible to adjust the regex and to determine if only cdata is checked via two
      properties: -Dua.xss.pattern=#REGEX_PATTERN# and -Dua.xss.check.cdata.only=false. If no pattern is used: -Dua.xss.pattern="",
      then ua.xss.check.cdata.only will be set to true.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Avoid</strong>
                <br/>
                Even though <strong>$ &amp; &lt;</strong> are the only restricted characters in the Control Center and Unified API from a schema perspective,
                considering the XSS checks, at a minimum, it is best to avoid the following characters: <strong>$^&amp;();=+&lt;\</strong>
                <br/>
                See <a class="doclink" href="#doc_CDATA">CDATA</a> for more information about using CDATA tags and XML entities with the Unified API.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="ErrorCodes">Error Codes</h1>
      <p xmlns="http://www.w3.org/1999/xhtml">The <strong>%s</strong> is used as a replacement value so that more meaningful information can be included in the message.</p>
      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Error Codes</strong>
                <br/>
                Please note that due to API changes and bug fixes, some of the error codes are no longer used.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Error Codes</strong>
              <ul>
              <li>Codes 9 and below apply to all APIs.</li>
              <li>Codes 10-15 are the Subscriber APIs like CreateSubscriber, DeleteSubscriber, etc.</li>
              <li>Codes 17-19 apply to all APIs.</li>
              <li>Code 55 is specifically related to password hashing for all APIs that modify credentials.</li>
              <li>For all other codes - the names match the request.</li>
              </ul>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div xmlns="http://www.w3.org/1999/xhtml" class="table-wrap">
        <table class="generalTable">
          <tbody>
            <th class="generalTh"> code </th>
            <th class="generalTh"> name </th>
            <th class="generalTh"> message </th>
            <tr>
              <td class="generalTd"> 0 </td>
              <td class="generalTd"> SUCCESS_CODE_GENERIC </td>
              <td class="generalTd"> Request completed successfully </td>
            </tr>
            <tr>
              <td class="generalTd"> 1 </td>
              <td class="generalTd"> SUCCESS_CODE_VALIDATION </td>
              <td class="generalTd"> Validation completed successfully </td>
            </tr>
            <tr>
              <td class="generalTd"> 2 </td>
              <td class="generalTd"> ERROR_CODE_GENERIC </td>
              <td class="generalTd"> Unable to process the request </td>
            </tr>
            <tr>
              <td class="generalTd"> 3 </td>
              <td class="generalTd"> ERROR_CODE_NULL </td>
              <td class="generalTd"> Object: %s is null </td>
            </tr>
            <tr>
              <td class="generalTd"> 4 </td>
              <td class="generalTd"> ERROR_CODE_INVALID_XML </td>
              <td class="generalTd"> Invalid XML: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 5 </td>
              <td class="generalTd"> ERROR_CODE_ILLEGAL_VALUE </td>
              <td class="generalTd"> Illegal Value: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 6 </td>
              <td class="generalTd"> ERROR_CODE_INVALID_REQUEST </td>
              <td class="generalTd"> Invalid Request: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 7 </td>
              <td class="generalTd"> ERROR_CODE_INVALID_RESPONSE </td>
              <td class="generalTd"> Invalid Response: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 8 </td>
              <td class="generalTd"> ERROR_CODE_REQUIRED_DATA </td>
              <td class="generalTd"> Required Data: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 9 </td>
              <td class="generalTd"> ERROR_CODE_NON_UNIQUE </td>
              <td class="generalTd"> Duplicate Value for Unique Data Constraint: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 10 </td>
              <td class="generalTd"> ERROR_CODE_CREATE </td>
              <td class="generalTd"> Error Creating Object: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 11 </td>
              <td class="generalTd"> ERROR_CODE_UPDATE </td>
              <td class="generalTd"> Error Updating Object: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 12 </td>
              <td class="generalTd"> ERROR_CODE_UPDATE_VERSION </td>
              <td class="generalTd"> Optimistic Locking Error - the version number does not match the database version, another party has probably updated the data. Refresh the request data and try the request again </td>
            </tr>
            <tr>
              <td class="generalTd"> 13 </td>
              <td class="generalTd"> ERROR_CODE_DELETE </td>
              <td class="generalTd"> Error Deleting Object: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 14 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_CREDENTIAL_BALANCE_ID </td>
              <td class="generalTd"> Error Deleting Credential: The networkId(s) [%s] match(es) a balance id - please change the balance id before deleting the credential(s). </td>
            </tr>
            <tr>
              <td class="generalTd"> 15 </td>
              <td class="generalTd"> ERROR_CODE_SEARCH </td>
              <td class="generalTd"> Error Searching for Object with key: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 16 </td>
              <td class="generalTd"> ERROR_CODE_AUTHENTICATE </td>
              <td class="generalTd"> Error Authenticating User/Subscriber Object with credential: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 17 </td>
              <td class="generalTd"> ERROR_CODE_SERVLET_EXCEPTION </td>
              <td class="generalTd"> Servlet Processing Error: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 18 </td>
              <td class="generalTd"> ERROR_CODE_WS_MODULE_NOT_INSTALLED_EXCEPTION </td>
              <td class="generalTd"> The expected module is not installed: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 19 </td>
              <td class="generalTd"> ERROR_CODE_WS_API_NOT_IMPLEMENTED_EXCEPTION </td>
              <td class="generalTd"> The requested api is not implemented at this time </td>
            </tr>
            <tr>
              <td class="generalTd"> 20 </td>
              <td class="generalTd"> ERROR_CODE_QUERY_SESSION </td>
              <td class="generalTd"> Error Querying Sessions(s) for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 21 </td>
              <td class="generalTd"> ERROR_CODE_REFRESH_SESSION </td>
              <td class="generalTd"> Error Refreshing Subscriber Profile: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 22 </td>
              <td class="generalTd"> ERROR_CODE_START_SESSION </td>
              <td class="generalTd"> Error Starting Session(s) for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 23 </td>
              <td class="generalTd"> ERROR_CODE_STOP_SESSION </td>
              <td class="generalTd"> Error Stopping Session(s) for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 24 </td>
              <td class="generalTd"> ERROR_CODE_UPDATE_SESSION </td>
              <td class="generalTd"> Error Updating Session for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 25 </td>
              <td class="generalTd"> ERROR_CODE_CREATE_BALANCE </td>
              <td class="generalTd"> Error Creating Balance for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 26 </td>
              <td class="generalTd"> ERROR_CODE_CREDIT </td>
              <td class="generalTd"> Error Crediting Quota for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 27 </td>
              <td class="generalTd"> ERROR_CODE_DEBIT </td>
              <td class="generalTd"> Error Debiting Quota for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 28 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_BALANCE </td>
              <td class="generalTd"> Error Deleting Balance for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 29 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_QUOTA </td>
              <td class="generalTd"> Error Deleting Quota for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 30 </td>
              <td class="generalTd"> ERROR_CODE_QUERY_BALANCE </td>
              <td class="generalTd"> Error Querying Balance for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 31 </td>
              <td class="generalTd"> ERROR_CODE_ROLLOVER_CREDIT </td>
              <td class="generalTd"> Error Rolling Over Credit for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 32 </td>
              <td class="generalTd"> ERROR_CODE_UPDATE_BALANCE </td>
              <td class="generalTd"> Error Updating Balance for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 33 </td>
              <td class="generalTd"> ERROR_CODE_CREATE_VOUCHER </td>
              <td class="generalTd"> Error Creating Voucher: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 34 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_VOUCHER </td>
              <td class="generalTd"> Error Deleting Voucher: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 35 </td>
              <td class="generalTd"> ERROR_CODE_QUERY_VOUCHER </td>
              <td class="generalTd"> Error Querying Voucher: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 36 </td>
              <td class="generalTd"> ERROR_CODE_EXECUTE_ACTION </td>
              <td class="generalTd"> Error Executing Action: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 37 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_CREDIT </td>
              <td class="generalTd"> Error Delete Credit for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 38 </td>
              <td class="generalTd"> ERROR_CODE_AUDIT </td>
              <td class="generalTd"> Error Auditing: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 39 </td>
              <td class="generalTd"> ERROR_CODE_PURGE_AUDIT_HISTORY </td>
              <td class="generalTd"> Error Purging Audit History: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 40 </td>
              <td class="generalTd"> ERROR_CODE_QUERY_AUDIT_HISTORY </td>
              <td class="generalTd"> Error Querying Audit History: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 41 </td>
              <td class="generalTd"> ERROR_CODE_AUDIT_MGR_IS_NOT_ENABLED </td>
              <td class="generalTd"> The Audit Module is not enabled. Please check the plugin configuration </td>
            </tr>
            <tr>
              <td class="generalTd"> 42 </td>
              <td class="generalTd"> ERROR_CODE_GET_SUBSCRIBER_COUNT </td>
              <td class="generalTd"> Error Getting the Subscriber Count: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 43 </td>
              <td class="generalTd"> ERROR_CODE_GENERATE_BATCH </td>
              <td class="generalTd"> Error Generating the Voucher Batch: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 44 </td>
              <td class="generalTd"> ERROR_CODE_REDEEM_VOUCHER </td>
              <td class="generalTd"> Error Redeeming the Voucher for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 45 </td>
              <td class="generalTd"> ERROR_CODE_CHANGE_STATUS </td>
              <td class="generalTd"> Error Changing the Status for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 46 </td>
              <td class="generalTd"> ERROR_CODE_CHANGE_SUBSCRIBER_AVPS </td>
              <td class="generalTd"> Error Changing the Avps for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 47 </td>
              <td class="generalTd"> ERROR_CODE_UPDATE_SERVICE </td>
              <td class="generalTd"> Error Updating the Service for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 48 </td>
              <td class="generalTd"> ERROR_CODE_ADD_SERVICE </td>
              <td class="generalTd"> Error Adding the Service for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 49 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_SERVICE </td>
              <td class="generalTd"> Error Deleting the Service for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 50 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_VOUCHER_BATCH </td>
              <td class="generalTd"> Error Deleting the Voucher Batch: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 51 </td>
              <td class="generalTd"> ERROR_CODE_SWITCH_SERVER </td>
              <td class="generalTd"> Error Switching the Service for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 52 </td>
              <td class="generalTd"> ERROR_CODE_EXTEND_CREDIT </td>
              <td class="generalTd"> Error Extending the Credit for Subscriber: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 53 </td>
              <td class="generalTd"> ERROR_CODE_GET_REF_DATA_SERVICES </td>
              <td class="generalTd"> Error Getting Service Reference Data: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 54 </td>
              <td class="generalTd"> ERROR_CODE_GET_REF_DATA_BALANCE </td>
              <td class="generalTd"> Error Getting Balance Reference Data: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 55 </td>
              <td class="generalTd"> ERROR_CODE_ENCRYPTION </td>
              <td class="generalTd"> Error Encrypting: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 56 </td>
              <td class="generalTd"> ERROR_CODE_ADD_SSID </td>
              <td class="generalTd"> Error Adding SSID: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 57 </td>
              <td class="generalTd"> ERROR_CODE_UPDATE_SSID </td>
              <td class="generalTd"> Error Updating SSID: %s </td>
            </tr>
            <tr>
              <td class="generalTd"> 58 </td>
              <td class="generalTd"> ERROR_CODE_DELETE_SSID </td>
              <td class="generalTd"> Error Deleting SSID: %s </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml" name="PolicyEngineErrorCodes">Policy Engine Error Codes</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">The Execute Action, Query Session, and Stop Session APIs send requests into the Policy Engine and interact with the policy state.
      The Policy Engine has a set of error codes that can be returned in the error messages that get returned by the APIs.</p>
      <div xmlns="http://www.w3.org/1999/xhtml" class="table-wrap">
        <table class="generalTable">
          <tbody>
            <th class="generalTh"> code </th>
            <th class="generalTh"> message </th>
            <th class="generalTh"> notes </th>
            <tr>
              <td class="generalTd"> SS002 </td>
              <td class="generalTd"> <ul>
                  <li>Avps are empty</li>
                  <li>Port and/or ISG IP Address AVPs are empty</li>
                </ul> </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> SS003 </td>
              <td class="generalTd"> </td>
              <td class="generalTd"> Failed to get a response object from startSession </td>
            </tr>
            <tr>
              <td class="generalTd"> SS004 </td>
              <td class="generalTd"> </td>
              <td class="generalTd"> login error </td>
            </tr>
            <tr>
              <td class="generalTd"> SS005 </td>
              <td class="generalTd"> </td>
              <td class="generalTd"> timeout (usually a COA timeout) </td>
            </tr>
            <tr>
              <td class="generalTd"> QND001 </td>
              <td class="generalTd"> Avps are empty </td>
              <td class="generalTd"> Query Network Device </td>
            </tr>
            <tr>
              <td class="generalTd"> AR00 </td>
              <td class="generalTd"> Success </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR01 </td>
              <td class="generalTd"> Success ALLOW_ALL authorization </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR02 </td>
              <td class="generalTd"> Failed USUM_AUTHORIZATION no domain found </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR03 </td>
              <td class="generalTd"> Failed USUM_AUTHORIZATION no user id retriever </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR04 </td>
              <td class="generalTd"> Failed USUM_AUTHORIZATION no user id found </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR05 </td>
              <td class="generalTd"> Failed USUM_AUTHORIZATION no password found for user </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR06 </td>
              <td class="generalTd"> Success USUM_AUTHORIZATION </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR07 </td>
              <td class="generalTd"> Failed USUM_AUTHORIZATION password and/or user name do not match </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR08 </td>
              <td class="generalTd"> Failed USUM_ONLY_AUTHORIZATION no domain found </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR09 </td>
              <td class="generalTd"> Failed USUM_ONLY_AUTHORIZATION no user id retriever </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR10 </td>
              <td class="generalTd"> Failed USUM_ONLY_AUTHORIZATION no user id found </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR11 </td>
              <td class="generalTd"> Failed USUM_ONLY_AUTHORIZATION no password found for user </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR12 </td>
              <td class="generalTd"> Success USUM_ONLY_AUTHORIZATION </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR13 </td>
              <td class="generalTd"> Failed USUM_ONLY_AUTHORIZATION password and/or user name do not match </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR14 </td>
              <td class="generalTd"> Success ANONYMOUS_AUTHORIZATION - user id, password match </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR15 </td>
              <td class="generalTd"> Failed ANONYMOUS_AUTHORIZATION - user id matches, password does not match </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR16 </td>
              <td class="generalTd"> Success ANONYMOUS_AUTHORIZATION - user id matches - no password check </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR17 </td>
              <td class="generalTd"> Failed ANONYMOUS_AUTHORIZATION - user id does not match anonymous user id </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR18 </td>
              <td class="generalTd"> Failed ANONYMOUS_AUTHORIZATION - no user id retriever </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR19 </td>
              <td class="generalTd"> TAL success </td>
              <td class="generalTd"> Existing Subscriber </td>
            </tr>
            <tr>
              <td class="generalTd"> AR20 </td>
              <td class="generalTd"> TAL success </td>
              <td class="generalTd"> TAL with no domain </td>
            </tr>
            <tr>
              <td class="generalTd"> AR23 </td>
              <td class="generalTd"> AAA_AUTHORIZATION success </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR24 </td>
              <td class="generalTd"> AAA_AUTHORIZATION success due to timeout </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR25 </td>
              <td class="generalTd"> Authorization failed for the following user [ '$userName' ] to server [ '$proxyAAAAuthorization.getAaaServer().getName()' ] </td>
              <td class="generalTd"> Access Reject Message </td>
            </tr>
            <tr>
              <td class="generalTd"> AR26 </td>
              <td class="generalTd"> Could not find a User ID from this message using the retriever: '$userIdRetrieverClassName' </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR27 </td>
              <td class="generalTd"> User ID '$userId', does not equal one-click User ID: '$oneClickVoucher.getOneClickUserId()' </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR28 </td>
              <td class="generalTd"> one-click-voucher success </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR29 </td>
              <td class="generalTd"> Password provided: '$password' does not equal one click password: '$oneClickVoucher.getOneClickPassword()' </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR30 </td>
              <td class="generalTd"> Voucher is expired </td>
              <td class="generalTd"> </td>
            </tr>
            <tr>
              <td class="generalTd"> AR31 </td>
              <td class="generalTd"> Voucher authenticated </td>
              <td class="generalTd"> </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- ===================================================================================================================== -->
      <h1 xmlns="http://www.w3.org/1999/xhtml" name="CDATA">CDATA</h1>

      <p xmlns="http://www.w3.org/1999/xhtml">The Unified API can accept CDATA tags for all fields.</p>
      <p xmlns="http://www.w3.org/1999/xhtml">Use the Plugin configuration in Policy Builder to set which fields will get CDATA tags for outgoing responses. By
      default, the following fields will have CDATA tags in responses: networkId, password, data, oldNetworkId, oldPassword, newPassword.</p>

      <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>Policy Builder Plugin CDATA Configuration</strong>
                <br/>
                Make sure to remove spaces from the CDATA fields configuration: networkId,password,data,oldNetworkId,oldPassword,newPassword
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <h4 xmlns="http://www.w3.org/1999/xhtml" name="PolicyEngineErrorCodes">XML Entities</h4>
      <p xmlns="http://www.w3.org/1999/xhtml">The Unified API can accept CDATA tags for all fields. If a field has a CDATA tag, any XML entities will not get resolved.</p>

      <p xmlns="http://www.w3.org/1999/xhtml">For example, the database will store the literal characters <strong>&amp;amp; &amp;lt;</strong>, if the following is sent in a request:
      <br/>
            &lt;SomeUnifiedApiRequest&gt; ...
          &lt;someElement&gt;&lt;![CDATA[&amp;amp; &amp;lt;]]&gt;&lt;/someElement&gt;
          ...
        &lt;/SomeUnifiedApiRequest&gt;
      </p>
      <p xmlns="http://www.w3.org/1999/xhtml">Conversely, the API will resolve the entities and the database will store <strong>&amp; &lt;</strong> if the following is sent in a request:
      <br/>
            &lt;SomeUnifiedApiRequest&gt; ...
          &lt;someElement&gt;&amp;amp; &amp;lt;&lt;/someElement&gt;
          ...
        &lt;/SomeUnifiedApiRequest&gt;
      </p>

      <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Resolved XML Entities</strong>
                <br/>
                The Unified API only resolves XML entities for requests and does not resolve stored data back into XML entities in responses! Therefore in the above example, where the
                <strong>&amp; &lt;</strong> literal characters were stored in the database; those characters will now make the response invalid according to the XML 1.0 specification. Therefore,
                CDATA must be used when sending XML entity references in requests.
                <br/>
                Invalid response: &lt;SomeUnifiedApiRequest&gt; ...
                  &lt;someElement&gt;&amp; &lt;&lt;/someElement&gt;
                  ...
                &lt;/SomeUnifiedApiRequest&gt;
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <!-- ===================================================================================================================== -->
    </xsd:documentation>
  </xsd:annotation>
  <!-- BEGIN USuM APIS -->
  <!-- AddCredentialRequest -->
  <xsd:element name="AddCredentialRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API adds a credential to an existing subscriber.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddCredentialRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      <audit>
      <networkId>uniqueIdentifier</networkId>
      <credential>
        <networkId>newUniqueIdentifier</networkId>
        <password>password</password>
        <type>type</type>
        <description>my Credential</description>
      </credential>
    </AddCredentialRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="credential" type="CredentialType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="AddCredentialResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddCredentialResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </AddCredentialResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- AddCredentialsRequest -->
  <xsd:element name="AddCredentialsRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API adds multiple credentials to an existing subscriber.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddCredentialsRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <credential>
        <networkId>newUniqueIdentifier</networkId>
        <password>password</password>
      </credential>
      <credential>
        <networkId>anotherUniqueIdentifier</networkId>
      </credential>
    </AddCredentialsRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="5" minOccurs="1" name="credential" type="CredentialType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="AddCredentialsResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddCredentialsResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </AddCredentialsResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- AddServiceRequest QNS-1563 -->
  <xsd:element name="AddServiceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API adds service definitions and corresponding Balance entries for a given subscriber.</p>
          <p>The new Balances follow existing Balance rules - meaning if new, then provision, but if the Balance already exists, then just add a new credit.</p>
          <p>If the service code already exists for the Subscriber, the service is not added or changed.</p>

          <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Not a Replace</strong>
                <br/>
                If the service already exists for the Subscriber, the service is not updated or changed in any way.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
          <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Automatic Balance Provisioning</strong>
                <br/>
                This feature allows Service Options to be configured so that when the Service is applied to the Subscriber, Balance is
                automatically provisioned. (It also removes Balance when a Service is removed.) If the system is setup for auto-provisioning, do not include the Balance
                object when using this API. That is, only send in the Balance object when the system is not setup for auto-provisioing.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddServiceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <service>
        <code>SERVICE_CODE</code>
        <enabled>true</enabled>
        <avp>
          <code>AVP_CODE</code>
          <value>AVP_VALUE</value>
        </avp>
        <schedule>
          <startDate>2011-01-01T00:00:00Z</startDate>
          <endDate>2012-01-01T00:00:00Z</endDate>
          <state>ON</state>
          <startTime>00:00</startTime>
          <endTime>23:59</endTime>
          <repeat>
            <dayOfMonth>*</dayOfMonth>
            <month>*</month>
            <dayOfWeek>?</dayOfWeek>
            <year>*</year>
          </repeat>
          <enabled>true</enabled>
        </schedule>
      </service>
      <balance>
        <code>DATA</code>
        <quotaCode>RECURRING</quotaCode>
        <startDate>2011-01-01T00:00:00Z</startDate>
        <expirationDate>2012-01-01T00:00:00Z</expirationDate>
        <initialAmount>500</initialAmount>
      </balance>
    </AddServiceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="1" name="service" type="ServiceType"/>
            <xsd:element maxOccurs="10" minOccurs="0" name="balance" type="CreateBalanceType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- AddServiceRequest QNS-1563 -->
  <xsd:element name="AddServiceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddServiceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </AddServiceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- AuthenticateSubscriberRequest -->
  <xsd:element name="AuthenticateSubscriberRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API validates a subscriber against the USuM database and returns a subscriber.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AuthenticateSubscriberRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <password>password</password>
    </AuthenticateSubscriberRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="password" type="xsd:string"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="AuthenticateSubscriberResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AuthenticateSubscriberResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <subscriber>
      ...
      </subscriber>
    </AuthenticateSubscriberResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="subscriber" type="SubscriberType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ChangeCredentialPasswordRequest -->
  <xsd:element name="ChangeCredentialPasswordRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API changes the password for a subscriber's credential.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeCredentialPasswordRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <oldPassword>password</oldPassword>
      <newPassword>newpassword</newPassword>
    </ChangeCredentialPasswordRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="oldPassword" type="xsd:string"/>
            <xsd:element maxOccurs="1" minOccurs="1" name="newPassword" type="xsd:string"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ChangeCredentialPasswordResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeCredentialPasswordResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ChangeCredentialPasswordResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ChangeCredentialUsernameRequest -->
  <xsd:element name="ChangeCredentialUsernameRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API changes the networkId (username) for a subscriber's credential.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeCredentialUsernameRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>newUniqueIdentifier</networkId>
      <oldNetworkId>uniqueIdentifier</oldNetworkId>
    </ChangeCredentialUsernameRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="oldNetworkId" type="xsd:string"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ChangeCredentialUsernameResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeCredentialUsernameResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ChangeCredentialUsernameResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ChangeSubscriberAvpsRequest QNS-1541 -->
  <xsd:element name="ChangeSubscriberAvpsRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API changes a subscriber's or subaccount's AVPs. The order of operation is delete, modify, add (new). The modify avps only modify the value.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeSubscriberAvpsRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <deletedAvp>
        <code>AVP_CODE</code>
        <value>VALUE</code>
      </deletedAvp>
      <modifiedAvp>
        <code>AVP_CODE</code>
        <value>VALUE</code>
        <newValue>NEW_VALUE</newValue>
      </modifiedAvp>
      <newAvp>
        <code>AVP_CODE</code>
        <value>VALUE</code>
      </newAvp>
    </ChangeSubscriberAvpsRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="100" minOccurs="0" name="deletedAvp" type="AvpType"/>
            <xsd:element maxOccurs="100" minOccurs="0" name="modifiedAvp" type="AvpType"/>
            <xsd:element maxOccurs="100" minOccurs="0" name="newAvp" type="AvpType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ChangeSubscriberAvpsRequest QNS-1541 -->
  <xsd:element name="ChangeSubscriberAvpsResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeSubscriberAvpsResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ChangeSubscriberAvpsResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ChangeSubscriberStatusRequest QNS-1543 -->
  <xsd:element name="ChangeSubscriberStatusRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API changes the subscriber's and all subaccounts' status. The changeAll boolean flag default == true which maintains backwards compatibility.
        When changeAll == false, the API will change the status for the specified subscriber only (sub account or parent account) </p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeSubscriberStatusRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <status>ACTIVE</status>
    </ChangeSubscriberStatusRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="status" type="StatusType"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="changeAll" type="xsd:boolean"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ChangeSubscriberStatusResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeSubscriberStatusResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ChangeSubscriberStatusResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- CreateSubscriberRequest
  ProvisionSubscriber (Balance API) = CreateSubscriber -->
  <xsd:element name="CreateSubscriberRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API creates a subscriber in the USuM database. It also allows provisioning initial quota/balance using the CreateBalance element.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}Example 1 - Minimum required fields

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateSubscriberRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <subscriber>
        <credential>
          <networkId>uniqueIdentifier</networkId>
          <password>password</password>
        </credential>
        <status>ACTIVE</status>
      </subscriber>
    </CreateSubscriberRequest>
  </se:Body>
</se:Envelope>

Example 2 - A more complete subscriber with multiple credentials and a service
and some additional fields including AVP examples

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateSubscriberRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <subscriber>
        <name>
          <fullName>Test User</fullName>
        </name>
        <credential>
          <networkId>uniqueIdentifier</networkId>
          <password>password</password>
          <expirationDate>2011-12-31T23:59:59Z</expirationDate>
        </credential>
        <credential>
          <networkId>uniqueIdentifier</networkId>
          <password>password</password>
        </credential>
        <service>
          <code>SERVICE_CODE</code>
          <enabled>true</enabled>
          <avp>
            <code>AVP_CODE</code>
            <value>AVP_VALUE</value>
          </avp>
          <avp>
            <code>AVP_CODE_2</code>
            <value>AVP_VALUE</value>
          </avp>
        </service>
        <status>ACTIVE</status>
        <startDate>2011-01-01T00:00:00+00:00</startDate>
        <endDate>2031-01-01T00:00:00+00:00</endDate>
        <billingInfo>
          <chargingId>123456789</chargingId>
        </billingInfo>
        <avp>
          <code>AVP_CODE</code>
          <value>AVP_VALUE</value>
        </avp>
        <avp>
          <code>AVP_CODE_2</code>
          <value>AVP_VALUE</value>
        </avp>
      </subscriber>
    </CreateSubscriberRequest>
  </se:Body>
</se:Envelope>

Example 3 - CreateBalance xml can be added to the request to provision quota
when the subscriber is created

<createBalance>
  <code>DATA</code>
  <quotaCode>Recurring</quotaCode>
  <startDate>2011-01-01T00:00:00Z</startDate>
  <expirationDate>2012-01-01T00:00:00Z</expirationDate>
  <initialAmount>500</initialAmount>
  <lastRecurringRefresh>2011-01-01T00:00:00Z</lastRecurringRefresh>
</createBalance>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="subscriber" type="SubscriberType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="CreateSubscriberResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateSubscriberResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </CreateSubscriberResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- CreateSubscribersRequest -->
  <xsd:element name="CreateSubscribersRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API creates multiple subscribers in the USuM database. It also allows provisioning initial quota/balance using the CreateBalance element.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateSubscribersRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <subscriber>
        ...
      </subscriber>
      <subscriber>
        ...
      </subscriber>
    </CreateSubscribersRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1000" minOccurs="1" name="subscriber" type="SubscriberType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="CreateSubscribersResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateSubscribersResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </CreateSubscribersResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteCredentialRequest -->
  <xsd:element name="DeleteCredentialRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API deletes a credential from a subscriber.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteCredentialRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
    </DeleteCredentialRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DeleteCredentialResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
         {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteCredentialResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteCredentialResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteCredentialsRequest -->
  <xsd:element name="DeleteCredentialsRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API deletes a set of credentials from a subscriber. </p>
       <div class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Minimum Number of Credentials</strong>
                <br/>
                A subscriber must always have at least 1 credential. Therefore, as the API removes credentials, once there is only one left, it stops processing.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Delete From One Subscriber</strong>
                <br/>
This API is only supposed to delete from one subscriber at a time.
The API uses the credentials passed in to find a subscriber or sub account,
and the first match is used. Therefore, the API should only send in a set
of credentials from the same subscriber or sub account. Once a subscriber
has been found, then each credential is checked for a match. Any credentials
not matched are ignored.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteCredentialsRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <networkId>uniqueIdentifier1</networkId>
      <networkId>uniqueIdentifier2</networkId>
      <networkId>uniqueIdentifier3</networkId>
    </DeleteCredentialsRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="5" minOccurs="1" name="networkId" type="xsd:string"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DeleteCredentialsResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteCredentialsResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteCredentialsResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteServiceRequest QNS-1563 -->
  <xsd:element name="DeleteServiceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API deletes services and corresponding Balance entries for a given subscriber.</p>

          <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Deleting Old Balances</strong>
                <br/>
                The deleteOldBalance field is set to false by default. If it is set to true and no balanceCodes are
                sent in the request, then ALL balances will be removed from the account.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
          <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Automatic Balance Provisioning</strong>
                <br/>
                This feature allows Service Options to be configured so that when the Service is applied to the Subscriber, Balance is
                automatically provisioned. (It also removes Balance when a Service is removed.) If the system is setup for auto-provisioning, do not include the Balance
                object when using this API. That is, only send in the Balance object when the system is not setup for auto-provisioing.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteServiceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <serviceCode>SERVICE_CODE</serviceCode>
      <balance>
        <code>BALANCE_CODE</code>
        <quotaCode>QUOTA_CODE</quotaCode>
      </balance>
      <hardDelete>true</hardDelete>
    </DeleteServiceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="1" name="serviceCode" type="xsd:string"/>
            <xsd:element maxOccurs="10" minOccurs="0" name="balance" type="DeleteBalanceType">
            <!--
              <xsd:annotation>
                <xsd:documentation>The balanceCode field indicates which configured balances
                  to delete. It overrides the deleteOldBalance field, so if any balanceCodes are
                  present in the request, only those codes are deleted.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="hardDelete" type="xsd:boolean">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                  The hardDelete field indicates whether the delete operation should remove
                  the balance disregarding open reservations. If hardDelete == true, then the
                  balance will be removed even if there are open reservations. If hardDelete == false,
                  the API throws an error if there are open reservations. hardDelete defaults to true.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="deleteOldBalance" type="xsd:boolean">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                The deleteOldBalance field is false by default. If set to true, and no
                balanceCodes are present in the request, then all balances for the subscriber are deleted.
                Please note that the delete operation is a softDelete.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteServiceRequest QNS-1563 -->
  <xsd:element name="DeleteServiceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteServiceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteServiceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteSubscriberRequest
  renamed from DeleteSubscriberByKey -->
  <xsd:element name="DeleteSubscriberRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API deletes a subscriber from the USuM database.</p>
        <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Renamed</strong>
                <br/>
The API has been renamed. It is DeleteSubscriberByKey in v1.0 API.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteSubscriberRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <hardDelete>false</hardDelete>
    </DeleteSubscriberRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="hardDelete" type="xsd:boolean">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The hardDelete field indicates whether the delete operation should remove
                  the subscriber completely from the database or if set to \'false\' just mark
                  the status field as DELETED but retain the subscriber in the database for historical
                  purposes.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DeleteSubscriberResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
         {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteSubscriberResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteSubscriberResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- GetSubscriberRequest -->
  <xsd:element name="GetSubscriberRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
      <p>This API retrieves a subscriber from the USuM database.</p>
      <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Success Response</strong>
                <br/>
The GetSubscriber API returns error code 0 (success) even if no subscriber is found.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <p>See the <a class="doclink" href="#element_QueryBalanceRequest">QueryBalance</a> request for information about the boolean options: includeExpiredData and excludeReservationsFromCreditTotal</p>
    </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetSubscriberRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <returnSessions>false</returnSessions>
      <returnBalances>true</returnBalances>
      <includeExpiredData>false</includeExpiredData>
      <excludeReservationsFromCreditTotal>true</excludeReservationsFromCreditTotal>
    </GetSubscriberRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="returnSessions" nillable="true" type="xsd:boolean">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                  The returnSessions field is a boolean telling the API to return any active sessions for the subscriber.
                </xsd:documentation>
              </xsd:annotation>
            -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="returnBalances" nillable="true" type="xsd:boolean">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                  The returnBalances field is a boolean telling the API to return balance data for the subscriber.
                </xsd:documentation>
              </xsd:annotation>
            -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="includeExpiredData" nillable="true" type="xsd:boolean">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                  The includeExpiredData field is only used if returnBalances is set to true. This field defaults to true.
                </xsd:documentation>
              </xsd:annotation>
            -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="excludeReservationsFromCreditTotal" nillable="true" type="xsd:boolean">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                  The excludeReservationsFromCreditTotal field is only used if returnBalances is set to true. This field defaults to false.
                </xsd:documentation>
              </xsd:annotation>
            -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="GetSubscriberResponse">
        <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetSubscriberResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <subscriber>
      ...
      </subscriber>
    </GetSubscriberResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="subscriber" type="SubscriberType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- GetSubscriberCountRequest -->
  <xsd:element name="GetSubscriberCountRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API retrieves the number of subscribers in the USuM database.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetSubscriberCountRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
    </GetSubscriberCountRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="GetSubscriberCountResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetSubscriebrCountResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <count>450000</count>
    </GetSubscriebrCountResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="count" type="xsd:integer"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- KeepAliveRequest -->
  <xsd:element name="KeepAliveRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API verifies that the server is active. It does not require the server to do any processing and therefore does not increase load.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <KeepAliveRequest xmlns="http://broadhop.com/unifiedapi/soap/types"/>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:sequence/>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="KeepAliveResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <KeepAliveResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </KeepAliveResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ProvisionServiceRequest QNS-1653 -->
  <xsd:element name="ProvisionServiceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API provisions service definitions and corresponding Balance entries for a given subscriber.</p>
          <p>The new Balances follow existing Balance rules - meaning if new, then provision, but if the Balance already exists, then just add a new credit.</p>
          <p>If the service code already exists for the Subscriber, the service is updated with the new data from the API.</p>
          <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Update = Replace</strong>
                <br/>
                If the service already exists for the Subscriber, the service is updated by replacing the existing data with the new data from the API. It is NOT an
                incremental update, it is a complete replacement of the object. For example, if the existing service object has an AVP stored on it, and the new service
                data from the API does not, the resulting service object will not have the AVP.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
          <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Automatic Balance Provisioning</strong>
                <br/>
                This feature allows Service Options to be configured so that when the Service is applied to the Subscriber, Balance is
                automatically provisioned. (It also removes Balance when a Service is removed.) If the system is setup for auto-provisioning, do not include the Balance
                object when using this API. That is, only send in the Balance object when the system is not setup for auto-provisioing.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ProvisionServiceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <service>
        <code>SERVICE_CODE</code>
        <enabled>true</enabled>
        <avp>
          <code>AVP_CODE</code>
          <value>AVP_VALUE</value>
        </avp>
        <schedule>
          <startDate>2011-01-01T00:00:00Z</startDate>
          <endDate>2012-01-01T00:00:00Z</endDate>
          <state>ON</state>
          <startTime>00:00</startTime>
          <endTime>23:59</endTime>
          <repeat>
            <dayOfMonth>*</dayOfMonth>
            <month>*</month>
            <dayOfWeek>?</dayOfWeek>
            <year>*</year>
          </repeat>
          <enabled>true</enabled>
        </schedule>
      </service>
      <balance>
        <code>DATA</code>
        <quotaCode>Recurring</quotaCode>
        <startDate>2011-01-01T00:00:00Z</startDate>
        <expirationDate>2012-01-01T00:00:00Z</expirationDate>
        <initialAmount>500</initialAmount>
      </balance>
    </ProvisionServiceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="1" name="service" type="ServiceType"/>
            <xsd:element maxOccurs="10" minOccurs="0" name="balance" type="CreateBalanceType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ProvisionServiceRequest QNS-1653 -->
  <xsd:element name="ProvisionServiceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ProvisionServiceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ProvisionServiceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- SearchSubscribersRequest -->
  <xsd:element name="SearchSubscribersRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API retrieves all Subscribers that match the given search criteria (filter element).</p>
        <p>Searches using the pre-defined filter options are "fuzzy" by default, meaning that the search will return values that
        are like matches and not just exact matches.</p>
        <p>See <a class="doclink" href="#doc_CustomSearchParams">Custom Search Params</a> for information about using custom search params
        rather than the pre-defined filter options.</p>
        <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Plugin Configuration</strong>
                <br/>
                Fuzzy or Regex searching is enabled by default in the Unified API Plugin Configuration. AVPs used in the custom search params can also use the same
                regex algorhythm as the pre-defined filters and must be enabled in the plugin configuration. (AVP regex is disabled by default.)
                Be careful because AVP regex searching can impact performance.
              </td>
            </tr>
          </tbody>
        </table>
        </div>
        <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Fuzzy Matching Caveats</strong>
                <br/>
                Do not include regular expressions in the search values. The code is written to do a case-insensitive regex match in the following manner: /^value/
                This regex means to match values that start (^) with the same characters. For example, if you send ‘rob‘ as the credential value in the request,
                the API will match rob, Robert or ROBERTA. If you send ‘123‘ as the credential value in the request, the API will match 123, 1234, etc.
              </td>
            </tr>
          </tbody>
        </table>
        </div>

      </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}Example 1 - Name Search

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <SearchSubscribersRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <filter>
        <name>
          <fullName>Test Subscriber</fullName>
        </name>
      </filter>
    </SearchSubscribersRequest>
  </se:Body>
</se:Envelope>

Example 2 - Name Search with balances and sessions

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <SearchSubscribersRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <filter>
        <name>
          <fullName>Test Subscriber</fullName>
        </name>
      </filter>
      <returnSessions>true</returnSessions>
      <returnBalances>true</returnBalances>
    </SearchSubscribersRequest>
  </se:Body>
</se:Envelope>

Example 3 - NetworkId Search

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <SearchSubscribersRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <filter>
        <networkId>uniqueId</networkId>
      </filter>
    </SearchSubscribersRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="filter" type="SearchType"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="returnSessions" type="xsd:boolean"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="returnBalances" type="xsd:boolean"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="SearchSubscribersResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <SearchSubscribersResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <subscriber>
      ...
      </subscriber>
      <subscriber>
      ...
      </subscriber>
      ...
    </SearchSubscribersResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="1000" minOccurs="0" name="subscriber" type="SubscriberType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- SwitchServiceRequest QNS-1542 -->
  <xsd:element name="SwitchServiceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API changes a service definition and corresponding Balance entry for a given subscriber to new ones.</p>
          <p>The oldServiceCode value is used to find the oldBalanceCode if oldBalanceCode is not sent in.
                If no balance is found, the API then checks for the number of balances. If 1 balance is found, then it is deleted,
                if more than 1, then an error is thrown. </p>
          <p>This API works with One Time or Recurring Quotas. The new quota is provisioned per the createBalance values.
            The lastRecurringRefresh date of the new quota is set per normal new provision rules. Old dates are not migrated
            and the validity period for the reservation stays the same. </p>
      <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Automatic Balance Provisioning</strong>
                <br/>
                This feature allows Service Options to be configured so that when the Service is applied to the Subscriber, Balance is
                automatically provisioned. (It also removes Balance when a Service is removed.) If the system is setup for auto-provisioning, do not include the Balance
                object when using this API. That is, only send in the Balance object when the system is not setup for auto-provisioing.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Reservations are not migrated</strong>
                <br/>
                Reservations are not migrated from the old Balance or Quota because Autowire code handles any latent charges.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Quota Capacity</strong>
                <br/>
                The new quota must have the same or more capacity than the old quota currently has available.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <SwitchServiceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <oldServiceCode>SERVICE_ORIGINAL</oldServiceCode>
      <service>
        <code>SERVICE_CODE</code>
        <enabled>true</enabled>
        <avp>
          <code>AVP_CODE</code>
          <value>AVP_VALUE</value>
        </avp>
        <schedule>
          <startDate>2011-01-01T00:00:00Z</startDate>
          <endDate>2012-01-01T00:00:00Z</endDate>
          <state>ON</state>
          <startTime>00:00</startTime>
          <endTime>23:59</endTime>
          <repeat>
            <dayOfMonth>*</dayOfMonth>
            <month>*</month>
            <dayOfWeek>?</dayOfWeek>
            <year>*</year>
          </repeat>
          <enabled>true</enabled>
        </schedule>
      </service>
      <oldBalanceCode>DATA</oldBalanceCode>
      <oldQuotaCode>OLD_QUOTA</oldQuotaCode>
      <balance>
        <code>DATA</code>
        <quotaCode>RECURRING</quotaCode>
        <startDate>2011-01-01T00:00:00Z</startDate>
        <expirationDate>2012-01-01T00:00:00Z</expirationDate>
        <initialAmount>500</initialAmount>
      </balance>
    </SwitchServiceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="oldServiceCode" type="xsd:string">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                The oldServiceCode value is used to find the oldBalanceCode if oldBalanceCode is not sent in.
                If no balance is found, the API then checks for the number of balances. If 1, then it is deleted,
                if more than 1, then error is thrown.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="service" type="ServiceType"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="oldBalanceCode" type="xsd:string"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="oldQuotaCode" type="xsd:string">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                The oldQuotaCode field is optional, but if set, the API will attempt to remove only
                the quota and not the whole Balance for the subscriber.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="balance" type="CreateBalanceType">
            <!--
              <xsd:annotation>
                <xsd:documentation>
                The balance element is optional because there are cases where switching the service should be
                independent of changing balance.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- SwitchServiceRequest QNS-1542 -->
  <xsd:element name="SwitchServiceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <SwitchServiceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </SwitchServiceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- UpdateServiceRequest QNS-1544 -->
  <xsd:element name="UpdateServiceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API updates a service definition and corresponding Balance entries for a given subscriber.</p>
          <p>The order of operation for the AVPs is delete, modify, add (new). The modify avps only modify the value.</p>
          <div class="panelMacro">
            <table class="noteMacro">
              <tbody>
                <tr>
                  <td class="noteImage">
                      <!-- image goes here -->
                  </td>
                  <td>
                    <strong>Schedules</strong>
                    <br/>
                 Because it is not possible to match an individual schedule object, the list is simply a replacement. If no list is present in the request, then nothing happens.
                 However, if you send an empty element (&lt;schedule/&gt; or &lt;schedule&gt;&lt;/schedule&gt;), the list will get nulled out.
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Automatic Balance Provisioning</strong>
                <br/>
                This feature allows Service Options to be configured so that when the Service is applied to the Subscriber, Balance is
                automatically provisioned. (It also removes Balance when a Service is removed.) If the system is setup for auto-provisioning, do not include the Balance
                object when using this API. That is, only send in the Balance object when the system is not setup for auto-provisioing.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateServiceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <code>SERVICE_CODE</code>
      <enabled>true</enabled>
      <deletedAvp>
        <code>AVP_CODE</code>
        <value>AVP_VALUE</value>
      </deletedAvp>
      <modifiedAvp>
        <code>AVP_CODE_2</code>
        <value>AVP_VALUE</value>
        <newValue>NEW_AVP_VALUE</newValue>
      </modifiedAvp>
      <newAvp>
        <code>NEW_AVP_CODE</code>
        <value>NEW_AVP_VALUE</value>
      </newAvp>
      <schedule>
        <startDate>2011-01-01T00:00:00Z</startDate>
        <endDate>2012-01-01T00:00:00Z</endDate>
        <state>ON</state>
        <startTime>00:00</startTime>
        <endTime>23:59</endTime>
        <repeat>
          <dayOfMonth>*</dayOfMonth>
          <month>*</month>
          <dayOfWeek>?</dayOfWeek>
          <year>*</year>
        </repeat>
        <enabled>true</enabled>
      </schedule>
      <balance>
        <code>DATA</code>
        <quotaCode>RECURRING</quotaCode>
        <startDate>2011-01-01T00:00:00Z</startDate>
        <expirationDate>2012-01-01T00:00:00Z</expirationDate>
        <initialAmount>500</initialAmount>
      </balance>
      <extendCredit>
        <balanceCode>DATA</balanceCode>
        <quotaCode>QUOTA</quotaCode>
        <creditId>_Dsdggsdw01282323jd</creditId>
        <add>false</add>
        <endDate>2013-01-31T00:00:00Z</endDate>
        <amount>500</amount>
      </extendCredit>
    </UpdateServiceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="enabled" type="xsd:boolean"/>
            <xsd:element maxOccurs="100" minOccurs="0" name="deletedAvp" type="AvpType"/>
            <xsd:element maxOccurs="100" minOccurs="0" name="modifiedAvp" type="AvpType"/>
            <xsd:element maxOccurs="100" minOccurs="0" name="newAvp" type="AvpType"/>
            <xsd:element maxOccurs="10" minOccurs="0" name="schedule" type="ScheduleType"/>
            <xsd:element maxOccurs="10" minOccurs="0" name="balance" type="CreateBalanceType"/>
            <xsd:element maxOccurs="10" minOccurs="0" name="extendCredit" type="ExtendCreditType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- UpdateServiceRequest QNS-1544 -->
  <xsd:element name="UpdateServiceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateServiceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <returnCredit>
        <id>_wertDSD1234sfsdge5657yfc</id>
        <nextRefreshDate>2012-11-28T00:00:00Z</nextRefreshDate>
        <balanceRemaining>250</balanceRemaining>
        <amountCredited>50</amountCredited>
        <callbackValidityTime>2012-11-28T00:00:00Z</callbackValidityTime>
      </returnCredit>
    </UpdateServiceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="0" name="returnCredit" type="ReturnCreditType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- UpdateSubscriberRequest -->
  <xsd:element name="UpdateSubscriberRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API updates a subscriber. An entire subscriber object must be sent. This request also updates credentials. It also allows provisioning initial quota/balance using the CreateBalance element.</p>
        <h4>Charging Id</h4>
        <p>The chargingId (subscriber.getBillingInfo().getChargingId()) is used
as a correlation id value between Balance and USuM. The default correlation
is the USuM id (generated by the database). If a chargingId is set on
the subscriber, the chargingId value becomes the correlation id. </p>
        <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Cannot Change the Charging Id</strong>
                <br/>
The UpdateSubscriber API does not/cannot change the
chargingId/Balance SubscriberId relationship. To make such a change you
must use <a href="#element_ChangeBalanceSubscriberIdRequest">ChangeBalanceSubscriberId</a>.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Balance</strong>
                <br/>
The UpdateSubscriber API does allow Balance updates and it can create new Balance. Please see <a href="#element_UpdateBalanceRequest">UpdateBalance</a> and
<a href="#element_CreateBalanceRequest">CreateBalance</a> for more information.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
       <div class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>The proper steps to use this API:</strong>
                <br/>
					1. Call GetSubscriber API to get the subscriber object.<br/>
					2. Update returned subscriber object as required.<br/>
					3. Call UpdateSubscriber API with updated subscriber object.<br/>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateSubscriberRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <subscriber>
        <id>4d4dc3c0f2e1f8ca3871bbd8</id>
        <parentId></parentId>
        <name>
          <fullName>Test User</fullName>
        </name>
        <credential>
          <networkId>70.1.128.7</networkId>
          <password>testuser</password>
          <expirationDate>2011-12-31T23:59:59Z</expirationDate>
        </credential>
        <credential>
          <networkId>70.1.128.9</networkId>
          <password>testuser</password>
        </credential>
        <service>
          <code>SERVICE_CODE</code>
          <enabled>true</enabled>
          <avp>
            <code>AVP_CODE</code>
            <value>AVP_VALUE</value>
          </avp>
          <avp>
            <code>AVP_CODE_2</code>
            <value>AVP_VALUE</value>
          </avp>
        </service>
        <status>ACTIVE</status>
        <version>0</version>
      </subscriber>
    </UpdateSubscriberRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="subscriber" type="SubscriberType">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  A complete subscriber object. Typically this will be the subscriber returned from
                  a GetSubscriberRequest.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="UpdateSubscriberResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateSubscriberResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </UpdateSubscriberResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- END USuM APIS -->
  <!-- BEGIN POLICY APIS -->
  <!-- ExecuteActionRequest -->
  <!-- ExecuteAction added from Policy API -->
  <xsd:element name="ExecuteActionRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API provides a mechanism to run commands against the Policy Engine.</p>
        <h4>
            <a name="link_LocationQuery">Location Query</a>
          </h4>
        <p>The Location Query ExecuteActionRequest replaces the original Policy Engine getCompleteId request and returns location data plus AVPs from the relevant network device.</p>
        <p>Parameters</p>
        <ul>
          <li>code - location-query</li>
          <li>args
            <ul>
              <li>ip-address - the framed ip address of the subscriber's device.</li>
              <li>port - the port of the subscriber's device.</li>
              <li>type - indicates the type of network device to check. If the value is set to the string literal ‘null’, then no device is checked. e.g. isg, car, asr9k or null</li>
            </ul>
          </li>
        </ul>
        <h4>
            <a name="link_NetworkDeviceQuery">Network Device Query</a>
          </h4>
        <p>The Network Device Query ExecuteActionRequest returns AVPs from the relevant network device like the getCompleteId request.</p>
        <p>Parameters</p>
        <ul>
          <li>code - network_device_query</li>
          <li>args
            <ul>
              <li>ip-address - the framed ip address of the subscriber's device.</li>
              <li>port - the port of the subscriber's device.</li>
              <li>type - indicates the type of network device to check. If the value is set to the string literal ‘null’, then no device is checked. e.g. isg, car, asr9k or null</li>
            </ul>
          </li>
        </ul>
        <h4>
            <a name="link_OneTimeCode">One Time Code</a>
          </h4>
        <p>The One Time Code process is 2-step process (Create and Validate). The first request, Create One Time Code, establishes a unique code and dummy subscriber in the database. The code value is then sent to the user via SMS or email. That user enters that code which is then used in the 2nd step, Validate One Time Code. If validation of the code against the dummy subscriber in the database is successful, the dummy subscriber is removed and the API returns success.</p>
        <h5>Policy Builder Custom Configuration</h5>
        <p>There are built in extension points in the Policy Builder blueprints that allow for additional custom actions to be performed when these 2 API requests are made. The most common thing is to have additional checks against 3rd party datastores.</p>
        <h5>Create One Time Code</h5>
        <p>Parameters</p>
        <ul>
          <li>code - create-onetimecode-request</li>
          <li>args
            <ul>
              <li>validity-time-min - the time in minutes for how long the code is valid e.g. 10</li>
              <li>code-length - the length of the generated random code value e.g. 5</li>
              <li>code-chars - the set of characters to use for the generated code e.g. abcd1234</li>
              <li>type - specifies the type of identity used for validating the user. e.g. email or mobile</li>
              <li>identity - specifies a credential used for validating the user against the external system. e.g. test@gmail.com or 13035551212</li>
              <li>destination - specifies the destination address to send the generated code. This is generally the same as the identity field.</li>
              <li>dest-type - specifies the notification mechanism used to send the generated code to the user user. Note this is different then the type field since it specifies the transport used to send the code to the user.
                <ul>
                  <li>A dest-type of native-email will use the CPS SMTP interface with a notification template of OTC-EMAIL</li>
                  <li>A dest-type of native-sms will use the CPS SMSC interface with a notification template of OTC-SMS</li>
                  <li>Any other value for dest-type will fall through the Non-Native policy portion of the configuration. In the Non-Native scenario, all notification templates are available.</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
        <h5>Validate One Time Code</h5>
        <p>Parameters</p>
        <ul>
          <li>code - validate-onetimecode-request</li>
          <li>args
            <ul>
              <li>code - the random unique code generated in the Create One Time Code request and sent to the user via sms or email. e.g. ser45tfd</li>
              <li>identity - specifies a credential used for validating the user against the external system. e.g. test@gmail.com or 13035551212</li>
            </ul>
          </li>
        </ul>
        <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Passcode and Identity Variables</strong>
                <br/>
             The OTC-EMAIL and OTC-SMS notification templates are pre-configured with $passcode and $identity keywords on which CPS can perform variable substitution. This is the mechanism of how the sms or email message gets the generated random code.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <h4>
            <a name="link_PasswordResetWithOTP">Password Reset with One Time Password</a>
          </h4>
      <p>The Password Reset ExecuteActionRequest provides a way for subscribers to reset their passwords which is a common function of most websites. The Password Reset with One Time Password functionality piggy-backs on the Create One Time Code request.</p>
      <p>Parameters</p>
      <ul>
          <li>code - create-onetimecode-request</li>
          <li>args
            <ul>
              <li>validity-time-min - the time in minutes for how long the code is valid e.g. 10</li>
              <li>code-length - the length of the generated random code value e.g. 5</li>
              <li>code-chars - the set of characters to use for the generated code e.g. abcd1234</li>
              <li>type - specifies the type of identity used for validating the user. e.g. email or mobile</li>
              <li>identity - specifies a credential used for validating the user against the external system. e.g. test@gmail.com#!PWR#! or 13035551212#!PWR#!</li>
              <li>destination - specifies the destination address to send the generated code. This is generally the same as the identity field.</li>
              <li>dest-type - specifies the notification mechanism used to send the generated code to the user user. Note this is different then the type field since it specifies the transport used to send the code to the user.
                <ul>
                  <li>A dest-type of native-email will use the CPS SMTP interface with a notification template of OTC-EMAIL</li>
                  <li>A dest-type of native-sms will use the CPS SMSC interface with a notification template of OTC-SMS</li>
                  <li>Any other value for dest-type will fall through the Non-Native policy portion of the configuration. In the Non-Native scenario, all notification templates are available.</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
        <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Append #!PWR#!</strong>
                <br/>
                You must append <strong>#!PWR#!</strong> to the identity value. The reason for this is that unlike the One Time Code flow which assumes the subscriber is not in the SPR database, the Password Reset flow is used with a subscriber that is already in the SPR database. However, the Create One Time Code action fails if a subscriber profile is found for the given username. Therefore, if you append a unique value such as <strong>#!PWR#!</strong>, the action will not find a subscriber and allow the process to continue.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

        <h4>
            <a name="link_ValidateRegistration">Validate Registration</a>
          </h4>
        <p>The Validate Registration ExecuteActionRequest provides a mechanism to validate subscribers against external systems. It is similar to the One Time Code APIs but it only works against the 3rd party datastores. Therefore, it will always require additional Policy Builder configuration via the Validate Registration extension point.</p>
        <p>Parameters</p>
        <ul>
          <li>code - validate-registration-request</li>
          <li>args
            <ul>
              <li>type - specifies the type of identity used for validating the user. e.g. email or mobile</li>
              <li>identity - unique indentifier used for validation</li>
              <li>validation-identity - additional unique identifier used for validation - some systems require 2 values</li>
              <li>password</li>
            </ul>
          </li>
        </ul>

        <h4>
            <a name="link_StartSession">Start Session</a>
          </h4>
        <p>The Start Session ExecuteActionRequest replaces the original Policy Engine setupSubscriberProfile request. It initiates a session on a network device. Currently, supports ISG, CAR, ASR5K, and ASR9K.</p>

        <p>Parameters</p>
        <ul>
          <li>code - start-session</li>
          <li>args
            <ul>
              <li>ISG_IP - the framed ip address of the subscriber's device. e.g. 172.12.9.1 NOTE: The L4 redirect will provide this information to the portal.</li>
              <li>PORT_NUMBER - the port of the subscriber's device. e.g. 1234 NOTE: The L4 redirect will provide this information to the portal.</li>
              <li>type - indicates the type of network device that will be used. e.g. isg, car, or asr9k. If the value is set to the string literal ‘null’, the API will fall through and do generic setup based on blueprints and policy configuration.</li>
              <li>USER_NAME - username of the subscriber.</li>
              <li>PASSWORD - password of the subscriber.</li>
            </ul>
          </li>
        </ul>

        <h4>
            <a name="link_RefreshDeviceUsage">Refresh Device Usage</a>
          </h4>
        <p>The Refresh Device Usage Query ExecuteActionRequest returns is an asynchronous request that triggers the network device such as ISG or SCE to update the accounting usage data for a given subscriber. This causes CPS to update the data as well.</p>
        <p>Parameters</p>
        <ul>
          <li>code - refresh-device-usage</li>
          <li>key
            <ul>
              <li>code - USuMSubscriberIdKey or USuMCredentialKey</li>
              <li>keyField code - usumSubscriberId or networkId: if you are using the USuMSubscriberIdKey:usumSubscriberId then the value is the database id value of the subscriber e.g. 4f5e4cc0e4b027c556fd0d7c. If you are using the USuMCredentialKey:networkId then the value is the subscriber's username e.g. username@gmail.com</li>
            </ul>
          </li>
          <li>args
            <ul>
              <li>code - bucket-id. The name of the quota bucket to refresh if this is supported by the network device.</li>
            </ul>
          </li>
        </ul>
        </div>
      </xsd:documentation>
    </xsd:annotation>
<!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}Location Query

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <code>location-query</code>
      <arg>
        <code>ip-address</code>
        <value>0.0.0.0</value>
      </arg>
      <arg>
        <code>port</code>
        <value>PBHK</value>
      </arg>
      <arg>
        <code>type</code>
        <value>isg|car|asr9k|null</value>
      </arg>
      <arg>
        <code>USERID_QUERY</code>
        <value>userId</value>
      </arg>
      <arg>
        <code>MSISDN_QUERY</code>
        <value>msisdn</value>
      </arg>
      <arg>
        <code>IMSI_QUERY</code>
        <value>imsi</value>
      </arg>
      <arg>
        <code>MAC_QUERY</code>
        <value>mac address</value>
      </arg>
      <arg>
        <code>CIRCUIT_ID_QUERY</code>
        <value>circuit id</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Network Device Query

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <code>network_device_query</code>
      <arg>
        <code>ip-address</code>
        <value>0.0.0.0</value>
      </arg>
      <arg>
        <code>port</code>
        <value>PBHK</value>
      </arg>
      <arg>
        <code>type</code>
        <value>isg|car|asr9k|null</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Create One Time Code

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <code>create-onetimecode-request</code>
      <arg>
        <code>type</code>
        <value>email</value>
      </arg>
      <arg>
        <code>dest-type</code>
        <value>native-sms</value>
      </arg>
      <arg>
        <code>destination</code>
        <value>3035551212</value>
      </arg>
      <arg>
        <code>identity</code>
        <value>uniqueIdentifier</value>
      </arg>
      <arg>
        <code>validity-time-min</code>
        <value>10</value>
      </arg>
      <arg>
        <code>code-length</code>
        <value>5</value>
      </arg>
      <arg>
        <code>code-chars</code>
        <value>abcdefgh</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Validate One Time Code

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <code>validate-onetimecode-request</code>
      <arg>
        <code>code</code>
        <value>sw34edft5</value>
      </arg>
      <arg>
        <code>identity</code>
        <value>uniqueIdentifier</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Password Reset with One Time Password

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <code>create-onetimecode-request</code>
      <arg>
        <code>type</code>
        <value>email</value>
      </arg>
      <arg>
        <code>dest-type</code>
        <value>native-sms</value>
      </arg>
      <arg>
        <code>destination</code>
        <value>3035551212</value>
      </arg>
      <arg>
        <code>identity</code>
        <value>uniqueIdentifier#!PWR#!</value>
      </arg>
      <arg>
        <code>validity-time-min</code>
        <value>10</value>
      </arg>
      <arg>
        <code>code-length</code>
        <value>5</value>
      </arg>
      <arg>
        <code>code-chars</code>
        <value>abcdefgh</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Validate Registration

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <code>validate-registration-request</code>
      <arg>
        <code>type</code>
        <value>email</value>
      </arg>
      <arg>
        <code>identity</code>
        <value>uniqueIdentifier</value>
      </arg>
      <arg>
        <code>validation-identity</code>
        <value>1234567</value>
      </arg>
      <arg>
        <code>password</code>
        <value>Password</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Start Session

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <code>start-session</code>
      <arg>
        <code>ISG_IP</code>
        <value>10.10.10.10</value>
      </arg>
      <arg>
        <code>PORT_NUMBER</code>
        <value>PBHK</value>
      </arg>
      <arg>
        <code>type</code>
        <value>isg|car|asr9k|null</value>
      </arg>
      <arg>
        <code>USER_NAME</code>
        <value>123456789</value>
      </arg>
      <arg>
        <code>PASSWORD</code>
        <value>password</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Refresh Device Usage No Buckets with USuMSubscriberIdKey

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <code>USuMSubscriberIdKey</code>
        <primary>false</primary>
        <keyField>
          <code>usumSubscriberId</code>
          <value>4f5e4cc0e4b027c556fd0d7c</value>
        </keyField>
      </key>
      <code>refresh-device-usage</code>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>

Refresh Device Usage For A Specific Bucket with USuMCredentialKey

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <code>USuMCredentialKey</code>
        <primary>false</primary>
        <keyField>
          <code>networkId</code>
          <value>username@gmail.com</value>
        </keyField>
      </key>
      <code>refresh-device-usage</code>
      <arg>
        <code>bucket-id</code>
        <value>GENERIC_USAGE</value>
      </arg>
    </ExecuteActionRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="key" type="SessionKeyType"/>
            <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
            <xsd:element maxOccurs="100" minOccurs="0" name="arg" type="AvpType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ExecuteActionResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}Location Query type=null

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/"><se:Body><ExecuteActionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
  <errorCode>0</errorCode>
  <errorMessage>Request completed successfully</errorMessage>
  <executeActionResponse>
    <responseObject>
      <entry>
        <string>_type</string>
        <string>QueryResult</string>
      </entry>
      <entry>
        <string>queryAvps</string>
        <list>
          <map>
            <entry>
              <string>_type</string>
              <string>QueryAvp</string>
            </entry>
            <entry>
              <string>value</string>
              <string>BHOP</string>
            </entry>
            <entry>
              <string>code</string>
              <string>locationCode</string>
            </entry>
          </map>
          <map>
            <entry>
              <string>_type</string>
              <string>QueryAvp</string>
            </entry>
            <entry>
              <string>value</string>
              <string>USuM Authorization</string>
            </entry>
            <entry>
              <string>code</string>
              <string>domainCode</string>
            </entry>
          </map>
          <map>
            <entry>
              <string>_type</string>
              <string>QueryAvp</string>
            </entry>
            <entry>
              <string>value</string>
              <string>false</string>
            </entry>
            <entry>
              <string>code</string>
              <string>loggedIn</string>
            </entry>
          </map>
        </list>
      </entry>
    </responseObject>
  </executeActionResponse>
</ExecuteActionResponse></se:Body></se:Envelope>

Location Query type=isg

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <executeActionResponse>
        <responseObject>
          <entry>
            <string>_type</string>
            <string>QueryResult</string>
          </entry>
          <entry>
            <string>queryAvps</string>
            <list>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>NAS-PORT</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>No valid Session</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>REPLY-MESSAGE</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>sg-version=1.0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-AVPAIR</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>503</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>ERROR-CAUSE</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>BHOP</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>locationCode</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>S10.10.12.10:68</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>sg-version=1.0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-AVPAIR</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>No valid Session</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>REPLY-MESSAGE</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>sg-version=1.0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-AVPAIR</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>S10.10.12.10</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>sg-version=1.0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-AVPAIR</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>172.17.1.11</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>FRAMED-IP-ADDRESS</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>S10.10.12.10</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>172.17.1.11</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>FRAMED-IP-ADDRESS</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>USuM Authorization</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>domainCode</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>false</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>loggedIn</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>nas-port:0.0.0.0:0/0/0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>NAS-PORT-ID</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>S10.10.12.10:68</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>$MA000c.29f1.d050</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>503</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>ERROR-CAUSE</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>503</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>ERROR-CAUSE</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>$MA000c.29f1.d050</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>sg-version=1.0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-AVPAIR</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>No valid Session</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>REPLY-MESSAGE</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>nas-port:0.0.0.0:0/0/0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>NAS-PORT-ID</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>0</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>NAS-PORT</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>QueryAvp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>S10.10.12.10</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
            </list>
          </entry>
        </responseObject>
      </executeActionResponse>
    </ExecuteActionResponse>
  </se:Body>
</se:Envelope>

Create One Time Code Success

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <ExecuteActionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
         <errorCode>0</errorCode>
         <errorMessage>Request completed successfully</errorMessage>
      </ExecuteActionResponse>
   </se:Body>
</se:Envelope>

Create One Time Code Failure

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <ExecuteActionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
         <errorCode>2</errorCode>
         <errorMessage>com.broadhop.exception.BroadhopException: OTC001:  User is already registered. One time code generation is disabled
com.broadhop.spr.impl.actions.CreateOneTimeCode.execute(CreateOneTimeCode.java36)
com.broadhop.policy.impl.RulesPolicyService.processSyncAction(RulesPolicyService.java486)
com.broadhop.policy.Rule_Validate_Code__247e55a8_1da4_4bf9_b095_d826bf53748d__yHv0IaBQEeGrGeuRX01s5g__0.consequence(Unknown Source)
com.broadhop.policy.Rule_Validate_Code__247e55a8_1da4_4bf9_b095_d826bf53748d__yHv0IaBQEeGrGeuRX01s5g__0ConsequenceInvoker.evaluate(Unknown Source)
org.drools.common.DefaultAgenda.fireActivation(DefaultAgenda.java554)
org.drools.common.DefaultAgenda.fireNextItem(DefaultAgenda.java518)
org.drools.common.AbstractWorkingMemory.fireAllRules(AbstractWorkingMemory.java475)
org.drools.common.AbstractWorkingMemory.fireAllRules(AbstractWorkingMemory.java439)
com.broadhop.policy.impl.RulesPolicyService.internalProcessRules(RulesPolicyService.java358)
com.broadhop.policy.impl.RulesPolicyService.process(RulesPolicyService.java210)
com.broadhop.policy.impl.RulesPolicyService$PolicyExecutionRunnable.run(RulesPolicyService.java793)
java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
java.util.concurrent.FutureTask.run(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)</errorMessage>
      </ExecuteActionResponse>
   </se:Body>
</se:Envelope>

Validate One Time Code Success

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <ExecuteActionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
         <errorCode>0</errorCode>
         <errorMessage>Request completed successfully</errorMessage>
      </ExecuteActionResponse>
   </se:Body>
</se:Envelope>

Validate One Time Code Failure

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <ExecuteActionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
         <errorCode>2</errorCode>
         <errorMessage>com.broadhop.exception.BroadhopException: OTC001:  One time code does not exist for user or code is invalid
com.broadhop.spr.impl.actions.ValidateOneTimeCode.execute(ValidateOneTimeCode.java57)
com.broadhop.policy.impl.RulesPolicyService.processSyncAction(RulesPolicyService.java486)
com.broadhop.policy.Rule_Validate_Code__247e55a8_1da4_4bf9_b095_d826bf53748d__yHv0IaBQEeGrGeuRX01s5g__0.consequence(Unknown Source)
com.broadhop.policy.Rule_Validate_Code__247e55a8_1da4_4bf9_b095_d826bf53748d__yHv0IaBQEeGrGeuRX01s5g__0ConsequenceInvoker.evaluate(Unknown Source)
org.drools.common.DefaultAgenda.fireActivation(DefaultAgenda.java554)
org.drools.common.DefaultAgenda.fireNextItem(DefaultAgenda.java518)
org.drools.common.AbstractWorkingMemory.fireAllRules(AbstractWorkingMemory.java475)
org.drools.common.AbstractWorkingMemory.fireAllRules(AbstractWorkingMemory.java439)
com.broadhop.policy.impl.RulesPolicyService.internalProcessRules(RulesPolicyService.java358)
com.broadhop.policy.impl.RulesPolicyService.process(RulesPolicyService.java210)
com.broadhop.policy.impl.RulesPolicyService$PolicyExecutionRunnable.run(RulesPolicyService.java793)
java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
java.util.concurrent.FutureTask.run(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)</errorMessage>
      </ExecuteActionResponse>
   </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <!--
<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExecuteActionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <executeActionResponse>
        <responseObject>
          <entry>
            <string>locationCode</string>
            <string>BHOP</string>
          </entry>
          <entry>
            <string>_type</string>
            <string>NetworkLocation</string>
          </entry>
          <entry>
            <string>loggedIn</string>
            <boolean>false</boolean>
          </entry>
          <entry>
            <string>domainCode</string>
            <string>USuM Authorization</string>
          </entry>
        </responseObject>
      </executeActionResponse>
    </ExecuteActionResponse>
  </se:Body>
</se:Envelope>
-->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="500" minOccurs="0" name="executeActionResponse" type="ExecuteActionResponseType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- QuerySessionRequest -->
  <xsd:element name="QuerySessionRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API retrieves session data from active sessions in the Policy Engine session cache. Because of the flexible nature of CPS configuration,
        session data may differ for every installation/deployment. Therefore the response XML from a QuerySession request
        simply defines a map that can contain any of the following objects: Map, List, String, Boolean, Long, Integer, and Byte-Array.</p>
        <p>In addition to the examples below, there may be the following keys stored on the session:
        <ul>
        <li>FramedIpKey:framedIp:VALUE - for example, FramedIpKey:framedIp:173.251.37.147</li>
        <li>MacAddressKey:macAddress:VALUE - for example, MacAddressKey:macAddress:0A2B.3C4D.5E6F</li>
        <li>ciscoAccountInfo:NASIpVALUE:FramedIpVALUE - for example, ciscoAccountInfo:167.206.20.1:S173.251.37.147</li>
        </ul>
        </p>
    </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}Example - UserIdKey

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QuerySessionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <key>
        <code>UserIdKey</code>
        <primary>false</primary>
        <keyField>
          <code>userId</code>
          <value>username</value>
        </keyField>
      </key>
    </QuerySessionRequest>
  </se:Body>
</se:Envelope>

Example - USuMSubscriberIdKey

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QuerySessionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <key>
        <code>USuMSubscriberIdKey</code>
        <primary>false</primary>
        <keyField>
          <code>usumSubscriberId</code>
          <value>12zzcvasdfqwer234qwfvr4fqwe</value>
        </keyField>
      </key>
    </QuerySessionRequest>
  </se:Body>
</se:Envelope>

Example - USuMCredentialKey

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QuerySessionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <key>
        <code>USuMCredentialKey</code>
        <primary>false</primary>
        <keyField>
          <code>networkId</code>
          <value>emediatest320@optimum.net</value>
        </keyField>
      </key>
    </QuerySessionRequest>
  </se:Body>
</se:Envelope>

Example - FramedIpKey

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QuerySessionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <key>
        <code>FramedIpKey</code>
        <primary>false</primary>
        <keyField>
          <code>framedIp</code>
          <value>172.0.0.1</value>
        </keyField>
      </key>
    </QuerySessionRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="key" type="SessionKeyType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="QuerySessionResponse">
  <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QuerySessionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <session>
        <sessionKey>
          <code>accountSessionId</code>
          <primary>true</primary>
          <keyField>
            <code>accountSessionId</code>
            <value>167.206.20.1:A7CE14420000163A</value>
          </keyField>
        </sessionKey>
        <sessionObject>
          <entry>
            <string>tags</string>
            <list>
              <string>USuMSubscriberIdKey:usumSubscriberId:50b51183e4b0b2dcee401c47</string>
              <string>USuMCredentialKey:networkId:emediatest302%40optimum.net</string>
              <string>UserIdKey:userId:emediatest302%40optimum.net</string>
              <string>MacAddressKey:macAddress:ac811233519f</string>
              <string>ciscoAccountInfo:167.206.20.1:S173.251.37.147</string>
              <string>ciscoAccountInfo:173.251.37.147:S173.251.37.147</string>
              <string>FramedIpKey:framedIp:173.251.37.147</string>
            </list>
          </entry>
          <entry>
            <string>avps</string>
            <list>
              <map>
                <entry>
                  <string>_type</string>
                  <string>Avp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>AWIFILOC1</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>CISCO-ACCOUNT-INFO</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>Avp</string>
                </entry>
                <entry>
                  <string>value</string>
                  <string>75B4EAEF5AAF060585904F3E7FE09C80</string>
                </entry>
                <entry>
                  <string>code</string>
                  <string>MESSAGE-AUTHENTICATOR</string>
                </entry>
              </map>
            </list>
          </entry>
          <entry>
            <string>_transId</string>
            <string>ddb708c9-8138-4499-adbf-73db195fce64-1</string>
          </entry>
          <entry>
            <string>macAddress</string>
            <string>ac811233519f</string>
          </entry>
          <entry>
            <string>deviceSessions</string>
            <list>
              <map>
                <entry>
                  <string>deviceService</string>
                  <string>WIFILOC1</string>
                </entry>
                <entry>
                  <string>_type</string>
                  <string>com.broadhop.radius.impl.devicemanager.domain.RadiusUsageTracking</string>
                </entry>
                <entry>
                  <string>inBytes</string>
                  <long>103906</long>
                </entry>
                <entry>
                  <string>sessionId</string>
                  <string>A7CE14420000163D</string>
                </entry>
                <entry>
                  <string>deviceManagerId</string>
                  <string>com.broadhop.radius.impl.devicemanager.RadiusReportingManager</string>
                </entry>
                <entry>
                  <string>outBytes</string>
                  <long>671971</long>
                </entry>
              </map>
              <map>
                <entry>
                  <string>locationCode</string>
                  <string>AAA Proxy User</string>
                </entry>
                <entry>
                  <string>_type</string>
                  <string>com.broadhop.policy.authdomain.SessionAuthDomain</string>
                </entry>
                <entry>
                  <string>talSession</string>
                  <boolean>false</boolean>
                </entry>
                <entry>
                  <string>deviceManagerId</string>
                  <string>com.broadhop.policy.authdomain.impl.DomainDeviceManager</string>
                </entry>
                <entry>
                  <string>providerCode</string>
                  <string>Cablevision Optimum.Net</string>
                </entry>
                <entry>
                  <string>domainCode</string>
                  <string>Cablevision</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>com.broadhop.policy.authdomain.impl.domain.AuthorizedSession</string>
                </entry>
                <entry>
                  <string>deviceManagerId</string>
                  <string>com.broadhop.policy.authdomain.impl.DomainDeviceManager</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>com.broadhop.balance.impl.autowire.BalanceDeviceSession</string>
                </entry>
                <entry>
                  <string>deviceManagerId</string>
                  <string>com.broadhop.balance.impl.autowire.AutowireBalanceManagerBlueprint</string>
                </entry>
              </map>
              <map>
                <entry>
                  <string>_type</string>
                  <string>com.broadhop.radius.impl.devicemanager.domain.IsgDeviceSession</string>
                </entry>
                <entry>
                  <string>services</string>
                  <list>
                    <map>
                      <entry>
                        <string>_type</string>
                        <string>com.broadhop.radius.devices.IsgServiceSession</string>
                      </entry>
                      <entry>
                        <string>sessionId</string>
                        <string>A7CE14420000163D</string>
                      </entry>
                      <entry>
                        <string>reactivationAllowed</string>
                        <map>
                          <entry>
                            <string>_type</string>
                            <string>java.util.Date</string>
                          </entry>
                          <entry>
                            <string>time</string>
                            <long>1359998144594</long>
                          </entry>
                        </map>
                      </entry>
                      <entry>
                        <string>minReactWaitTime</string>
                        <int>30</int>
                      </entry>
                      <entry>
                        <string>active</string>
                        <boolean>false</boolean>
                      </entry>
                      <entry>
                        <string>serviceCode</string>
                        <string>WIFILOC1</string>
                      </entry>
                    </map>
                  </list>
                </entry>
                <entry>
                  <string>keyType</string>
                  <int>0</int>
                </entry>
                <entry>
                  <string>radiusGroup</string>
                  <string>ISG1</string>
                </entry>
                <entry>
                  <string>deviceManagerId</string>
                  <string>com.broadhop.radius.impl.devicemanager.IsgNetworkDeviceManager</string>
                </entry>
                <entry>
                  <string>terminated</string>
                  <boolean>false</boolean>
                </entry>
                <entry>
                  <string>accountInfo</string>
                  <string>S173.251.37.147</string>
                </entry>
                <entry>
                  <string>loopbackAddress</string>
                  <string>173.251.37.147</string>
                </entry>
                <entry>
                  <string>callingStationId</string>
                  <string>ac811233519f</string>
                </entry>
                <entry>
                  <string>sessionAvps</string>
                  <list/>
                </entry>
                <entry>
                  <string>radiusUserId</string>
                  <string>emediatest302@optimum.net</string>
                </entry>
                <entry>
                  <string>accountSessionId</string>
                  <string>A7CE14420000163A</string>
                </entry>
                <entry>
                  <string>ipAddress</string>
                  <string>167.206.20.1</string>
                </entry>
              </map>
            </list>
          </entry>
          <entry>
            <string>credentialId</string>
            <string>emediatest302@optimum.net</string>
          </entry>
          <entry>
            <string>startTime</string>
            <date>2013-02-04T09:38:21.000-07:00</date>
          </entry>
          <entry>
            <string>_type</string>
            <string>com.broadhop.session.domain.NetworkSession</string>
          </entry>
          <entry>
            <string>_id</string>
            <map>
              <entry>
                <string>accountSessionId</string>
                <string>167.206.20.1:A7CE14420000163A</string>
              </entry>
            </map>
          </entry>
          <entry>
            <string>expirationTime</string>
            <date>2013-02-04T18:15:14.345-07:00</date>
          </entry>
          <entry>
            <string>framedIp</string>
            <string>173.251.37.147</string>
          </entry>
          <entry>
            <string>userId</string>
            <string>emediatest302@optimum.net</string>
          </entry>
          <entry>
            <string>nextEvalTime</string>
            <date>2013-02-04T18:15:14.345-07:00</date>
          </entry>
          <entry>
            <string>countsAgainstMaxSessions</string>
            <boolean>true</boolean>
          </entry>
          <entry>
            <string>key</string>
            <map>
              <entry>
                <string>accountSessionId</string>
                <string>167.206.20.1:A7CE14420000163A</string>
              </entry>
            </map>
          </entry>
        </sessionObject>
      </session>
    </QuerySessionResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="500" minOccurs="0" name="session" type="SessionType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- StopSessionRequest -->
  <!-- RemoveSession (Policy API) = StopSession -->
  <xsd:element name="StopSessionRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API stops an active session on the network and discards the data from the Policy Engine session cache.</p>
        <p>This API replaces the version 5.2 Policy Engine RemoveSession API.</p>
        <p>Pleasee see <a class="doclink" href="#element_QuerySessionRequest">QuerySession</a> for more information about keys to use.</p>
      </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <StopSessionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <key>
        <code>UserIdKey</code>
        <primary>true</primary>
        <keyField>
          <code>userId</code>
          <value>uniqueIndentifier</value>
        </keyField>
      </key>
    </StopSessionRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="key" type="SessionKeyType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="StopSessionResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <StopSessionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </StopSessionResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- UpdateSessionRequest -->
  <xsd:element name="UpdateSessionRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API updates an active session on the network and in the Policy Engine session cache. It removes or adds AVPs.</p>
          <p>Pleasee see <a class="doclink" href="#element_QuerySessionRequest">QuerySession</a> for more information about keys to use.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateSessionRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <key>
        <code>UserIdKey</code>
        <primary>true</primary>
        <keyField>
          <code>userId</code>
          <value>uniqueIdentifier</value>
        </keyField>
      </key>
      <newAvp>
        <code>cisco</code>
        <value>sharedsecret</value>
      </newAvp>
      <deletedAvp>
        <code>key</code>
        <value>{}</value>
      </deletedAvp>
    </UpdateSessionRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="key" type="SessionKeyType"/>
            <xsd:element maxOccurs="100" minOccurs="1" name="newAvp" type="AvpType"/>
            <xsd:element maxOccurs="100" minOccurs="0" name="deletedAvp" type="AvpType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="UpdateSessionResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateSessionResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </UpdateSessionResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- END POLICY APIS -->
  <!-- BEGIN BALANCE APIS -->
  <!-- ChangeSubscriberAccountId -->
  <!-- ChangeSubscriberAccountId (Balance API) = ChangeBalanceSubscriberId -->
  <xsd:element name="ChangeBalanceSubscriberIdRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API alters the chargingId value for a subscriber and the MsBM SubscriberId. This API replaces the old MsBM API ChangeSubscriberAccountId.</p>
        <p>The chargingId (subscriber.getBillingInfo().getChargingId()) is used as a correlation id value between Balance and USuM.
          The default correlation is the USuM id (generated by the database). If a chargingId is set on the subscriber, the chargingId value becomes the correlation id.</p>
        <p>This API must be used to add an existing subscriber to a shared Balance account. Set the shared flag == true.</p>
        <p>When removing a subscriber from a shared Balance account, set the shared flag == true. The newBalanceSubscriberId value is used to create a new chargingId for the
        subscriber, and the new Balance account will have no Balance. If &lt;balance/&gt; elements are included in the request, then the new account will be provisioned in the normal
        fashion. Because the new Balance account has no Balance in the shared scenario, the &lt;extendCredit/&gt; elements are not applicable. </p>
      <div class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Update Scope</strong>
                <br/>
                Please note that the <a href="#element_UpdateSubscriberRequest">UpdateSubscriber</a> API does not/cannot change the chargingId/Balance SubscriberId relationship.
                To make such a change you must use <a href="#element_ChangeBalanceSubscriberIdRequest">ChangeBalanceSubscriberId</a>.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Old Account is Deleted!</strong>
                <br/>
                When adding a subscriber to a shared Balance, the Balance record for the <strong>old account</strong>
                is permanently deleted from the database and all quota is lost, unless the quota is migrated manually using the
                <a href="#element_ExtendCreditRequest">ExtendCredit</a> or <a href="#element_CreateBalanceRequest">CreateBalance</a> elements.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
      {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeBalanceSubscriberIdRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <newBalanceSubscriberId>chargingId</newBalanceSubscriberId>
    </ChangeBalanceSubscriberIdRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="newBalanceSubscriberId" type="xsd:string"/>
            <xsd:element default="false" maxOccurs="1" minOccurs="0" name="shared" type="xsd:boolean"/>
            <xsd:element default="false" maxOccurs="1" minOccurs="0" name="removeOriginalAccount" type="xsd:boolean">
              <!--
              <xsd:annotation>
                <xsd:documentation>The removeOriginalAccount field is only used when the shared element is set to true. The removeOriginalAccount behaves as follows:
                Set shared == true and removeOriginalAccount == true when adding an existing single account balance to a shared account balance. In this case,
                the existing single subscriber account will get removed from the database and the subscriber\'s chargingId is now associated with the group account balance.
                Set shared == true and removeOriginalAccount == false when removing a single subscriber from the group account to re-establish the subscriber\'s separate
                account balance. In this scenario, the shared account balance will remain in the system with the appropriate quota. A new single subscriber account
                balance will be created. In this case, the balance elements can then be used to provision new balance for the new single subscriber.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="10" minOccurs="0" name="balance" type="CreateBalanceType"/>
            <xsd:element maxOccurs="10" minOccurs="0" name="extendCredit" type="ExtendCreditType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ChangeBalanceSubscriberIdResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeBalanceSubscriberIdResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ChangeBalanceSubscriberIdResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="0" name="returnCredit" type="ReturnCreditType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ChangeRecurringRefreshDayRequest -->
  <!-- ChangeRecurringRefreshDayOfTheMonth = ChangeRecurringRefreshDay added -->
  <xsd:element name="ChangeRecurringRefreshDayRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API changes the refresh day for the monthly recurring quota accounting, which is the billing date. This API replaces the old MsBM API ChangeRecurringRefreshDayOfTheMonth. </p>
        <p>For a monthly refreshing quota, this would change the refresh day of the month to the specified value and the quota would always refresh on that day of the month.</p>
        <p>For a non-month based refresh period, the value passed in will just denote the next day of the month the quota will refresh. After that date the quota will continue to refresh on the frequency set up in reference data, i.e. every 10 days, every 2 weeks, etc. The time element of the new datetime will be zeroed out.</p>

        <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>What This API Does NOT Do!</strong>
                <br/>
This API was designed/tested for monthly recurring quotas only. The behavior with non-monthly refresh periods is eccentric and not guaranteed to behave as desired.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
      {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeRecurringRefreshDayRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <balanceCode>DATA</balanceCode>
      <quotaCode>Recurring</quotaCode>
      <newDayOfTheMonth>15</newDayOfTheMonth>
      <resetCreditEndDates>true</resetCreditEndDates>
    </ChangeRecurringRefreshDayRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="balanceCode" type="xsd:string"/>
            <xsd:element maxOccurs="1" minOccurs="1" name="quotaCode" type="xsd:string"/>
            <xsd:element maxOccurs="1" minOccurs="1" name="newDayOfTheMonth">
              <!--
              <xsd:annotation>
                <xsd:documentation>The newDayOfTheMonth field is an integer between 1 and 28 inclusive.</xsd:documentation>
              </xsd:annotation>
              -->
              <xsd:simpleType>
                <xsd:restriction base="xsd:integer">
                  <xsd:minInclusive value="1"/>
                  <xsd:maxInclusive value="28"/>
                </xsd:restriction>
              </xsd:simpleType>
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="resetCreditEndDates" type="xsd:boolean">
              <!--
              <xsd:annotation>
                <xsd:documentation>The resetCreditEndDates field indicates whether the API should
                  change valid (non-expired) credits to align with the new refresh date.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ChangeRecurringRefreshDayResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeRecurringRefreshDayResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ChangeRecurringRefreshDayResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ChangeBillCycleRequest -->
  <xsd:element name="ChangeBillCycleRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API changes the bill cycle day for the Balance account for a given subscriber.</p>
      </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeBillCycleRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <newBillCycleDay>15</newBillCycleDay>
    </ChangeBillCycleRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="newBillCycleDay">
              <!--
              <xsd:annotation>
                <xsd:documentation>The newBillCycleDay field is an integer between 1 and 31 inclusive.</xsd:documentation>
              </xsd:annotation>
              -->
              <xsd:simpleType>
                <xsd:restriction base="xsd:integer">
                  <xsd:minInclusive value="1"/>
                  <xsd:maxInclusive value="31"/>
                </xsd:restriction>
              </xsd:simpleType>
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ChangeBillCycleResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ChangeBillCycleResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </ChangeBillCycleResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- CreateBalanceRequest
  ChangeRecurringRefreshDayOfTheMonth = ChangeRecurringRefreshDay
  Provision (Balance API) = CreateBalance
       CreateSubscriber also provisions -->
  <xsd:element name="CreateBalanceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API  provisions balance/quota for a given subscriber. This API replaces the old MsBM API ProvisionSubscriber.</p>
        <p>If the balance already exists, the API will just credit the existing balance unless the quota is recurring, then it throws an error.</p>
        <p>By default, CreateBalance will set lastRecurringRefresh to the current datetime and WILL NOT zero out the time to midnight.</p>

        <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>CreateSubscriberRequest and UpdateSubscriberRequest</strong>
                <br/>
                <a href="#element_CreateSubscriberRequest">CreateSubscriber</a> and <a href="#element_UpdateSubscriberRequest">UpdateSubscriber</a> can also provision initial balance for a subscriber.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Removed Elements</strong>
                <br/>
The nextRefreshDate and avp elements in a threshold have been removed because they are not used by the Balance module.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <CreateBalanceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
            <audit>
              <id>username</id>
              <comment>comment</comment>
            </audit>
            <networkId>uniqueIdentifier</networkId>
            <balance>
               <code>DATA</code>
               <quotaCode>RECURRING</quotaCode>
               <startDate>2011-01-01T00:00:00Z</startDate>
               <expirationDate>2012-01-01T00:00:00Z</expirationDate>
               <initialAmount>500</initialAmount>
               <lastRecurringRefresh>2011-01-01T00:00:00Z</lastRecurringRefresh>
            </balance>
      </CreateBalanceRequest>
   </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="1" name="balance" type="CreateBalanceType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="CreateBalanceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateBalanceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </CreateBalanceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- CreditRequest -->
  <xsd:element name="CreditRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API credits quota for a subscriber.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreditRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <balanceCode>DATA</balanceCode>
      <quotaCode>RECURRING</quotaCode>
      <amount>100</amount>
      <startDate>2011-01-01T00:00:00Z</startDate>
      <expirationDate>2012-01-01T00:00:00Z</expirationDate>
    </CreditRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="balanceCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The balanceCode field indicates which configured balance
                  to credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="quotaCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The quotaCode field indicates which configured quota
                  to credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="amount" type="xsd:long">
              <!--
              <xsd:annotation>
                <xsd:documentation>The amount field indicates how much to credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="startDate" type="xsd:dateTime">
              <!--
              <xsd:annotation>
                <xsd:documentation>The startDate field indicates when the credit amount will
                  become active and usable.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="expirationDate" type="xsd:dateTime">
              <!--
              <xsd:annotation>
                <xsd:documentation>The expirationDate field indicates when the credit amount will
                  expire and no longer be usable even if there is a remaining amount.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="CreditResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreditResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <returnCredit>
        <creditId>_wertDSD1234sfsdge5657yfc</creditId>
        <nextRefreshDate>2012-11-28T00:00:00Z</nextRefreshDate>
        <balanceRemaining>250</balanceRemaining>
        <amountCredited>50</amountCredited>
        <callbackValidityTime>2012-11-28T00:00:00Z</callbackValidityTime>
      </returnCredit>
    </CreditResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <!-- added -->
            <xsd:element maxOccurs="1" minOccurs="1" name="returnCredit" type="ReturnCreditType"/>
            <!-- added -->
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DebitRequest -->
  <xsd:element name="DebitRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API debits quota for a subscriber.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DebitRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>networkId</networkId>
      <balanceCode>DATA</balanceCode>
      <quotaCode>Recurring</quotaCode>
      <amount>200</amount>
    </DebitRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="balanceCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The balanceCode field indicates which configured balance
                  to debit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="quotaCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The quotaCode field indicates which configured quota
                  to debit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="amount" type="xsd:long">
              <!--
              <xsd:annotation>
                <xsd:documentation>The amount field indicates how much to debit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DebitResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DebitResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <returnDebit>
        <nextRefreshDate>2012-11-28T00:00:00Z</nextRefreshDate>
        <balanceRemaining>250</balanceRemaining>
        <amountDebited>50</amountDebited>
        <callbackValidityTime>2012-11-28T00:00:00Z</callbackValidityTime>
        <exhausted>false</exhausted>
      </returnDebit>
    </DebitResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <!-- added -->
            <xsd:element maxOccurs="1" minOccurs="1" name="returnDebit" type="ReturnDebitType"/>
            <!-- added -->
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteBalanceRequest -->
  <!-- DeProvision (Balance API) = DeleteBalance -->
  <xsd:element name="DeleteBalanceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API removes balance from a subscriber. This API does not deprovision a balance. To deprovision a balance, use <a class="doclink" href="#element_UpdateBalanceRequest">UpdateBalance</a>.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteBalanceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <code>DATA</code>
      <hardDelete>false</hardDelete>
    </DeleteBalanceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The code field indicates which configured balance
                  to delete.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="hardDelete" type="xsd:boolean">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The hardDelete field indicates whether the delete operation should remove
                  the balance disregarding open reservations. If hardDelete == true, then the
                  balance will be removed even if there are open reservations. If hardDelete == false,
                  the API throws an error if there are open reservations. hardDelete defaults to true.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DeleteBalanceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteBalanceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteBalanceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteCreditRequest -->
  <xsd:element name="DeleteCreditRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API removes a credit from a quota.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteCreditRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <balanceCode>DATA</balanceCode>
      <quotaCode>RECURRING</quotaCode>
      <creditId>1</creditId>
    </DeleteCreditRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="balanceCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The balanceCode field indicates from which configured balance
                  to delete the credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="quotaCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The quotaCode field indicates from which configured quota
                  to delete the credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="creditId" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The creditId field is the unique identifier of the credit object. To determine this
                  value, use QueryBalanceRequest.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DeleteCreditResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteCreditResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteCreditResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteQuotaRequest -->
  <!-- RemoveQuota (Balance API) = DeleteQuota -->
  <xsd:element name="DeleteQuotaRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API removes a quota from a balance. This API replaces the old MsBM API RemoveQuota.</p>
          <p>The <strong>hardDelete</strong> element has been added to provide operational consistency with <a class="doclink" href="#element_DeleteBalanceRequest">DeleteBalance</a>.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteQuotaRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <balanceCode>DATA</balanceCode>
      <code>RECURRING</code>
      <hardDelete>true</hardDelete>
    </DeleteQuotaRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="balanceCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The balanceCode field indicates from which configured balance
                  to delete the quota.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>The code field indicates which configured quota
                  to delete.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="hardDelete" type="xsd:boolean">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The hardDelete field indicates whether the delete operation should remove
                  the quota even if there are open reservations. If hardDelete == true, then
                  the quota and any open reservations are removed. If hardDelete == false, then
                  the API throws an error if there are open reservations.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DeleteQuotaResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteQuotaResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteQuotaResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ExtendCreditRequest QNS-1581 -->
  <xsd:element name="ExtendCreditRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API extends (modifies) a credit by moving the expiration date into the future and/or adding to the amount of credit available.</p>
          <p>The resulting modified credit does not account for any debits. For example in the case of add = true, if the original credit amount is 100 and 50 is debited,
          and it is then extended by 100, the resulting credit amount will be 200, and the available amount will be 150.
          For example in the case of add = false (meaning replace), if the original credit amount is 100 and 50 is debited, and it is changed with a replacement amount of 300,
          the resulting credit amount will be 300, and the available amount will be 250.</p>
      <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>One Time Quota Only!</strong>
                <br/>
                ExtendCredit API only works for One Time Quota NOT Recurring.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>What This API Does Not Do</strong>
                <br/>
                This API does not modify the start date, move the end date to an earlier date, or reduce of the amount of quota.
                Changes of these types will cause system instability and will almost always invalidate active reservations.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
        {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExtendCreditRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <extendCredit>
        <balanceCode>DATA</balanceCode>
        <quotaCode>QUOTA</quotaCode>
        <creditId>_Dsdggsdw01282323jd</creditId>
        <add>false</add>
        <endDate>2013-01-31T00:00:00Z</endDate>
        <amount>500</amount>
      </extendCredit>
    </ExtendCreditRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="1" name="extendCredit" type="ExtendCreditType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- ExtendCredit QNS-1581 -->
  <xsd:element name="ExtendCreditResponse">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Amount Credited</strong>
                <br/>
                The amountCredited field is overloaded because the API can do an add or a replace. If the API has performed a
                replace the amountCredited will show the new total amount of credit which should match the passed in value.
                If the API has performed an add the amountCredited will show the new total amount of credit which is not
                the amount that was added (the value passed into the API).
              </td>
            </tr>
          </tbody>
        </table>
      </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <ExtendCreditResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <returnCredit>
        <id>_wertDSD1234sfsdge5657yfc</id>
        <nextRefreshDate>2012-11-28T00:00:00Z</nextRefreshDate>
        <balanceRemaining>250</balanceRemaining>
        <amountCredited>50</amountCredited>
        <callbackValidityTime>2012-11-28T00:00:00Z</callbackValidityTime>
      </returnCredit>
    </ExtendCreditResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="10" minOccurs="1" name="returnCredit" type="ReturnCreditType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- QueryBalanceRequest -->
  <!-- QuerySubscriber (Balance API) = QueryBalance -->
  <xsd:element name="QueryBalanceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API retrieves a subscriber's balance.</p>
        <p>This API replaces the old MsBM QuerySubscriber API. The set of boolean options in the old API have been condensed to 2 booleans:
          includeExpiredData and excludeReservationsFromCreditTotal.</p>
    <ul>
      <li>includeExpireData: if true, returns all account balances whether they are currently active or deprovisioned. Also returns all credits including expired credits.</li>
      <li>excludeReservationsFromCreditTotal: if true, returns credit totals without reservation data being calculated into the totals.</li>
    </ul>

    <h4>New Parameters to Old Parameters</h4>

    <div class="table-wrap" style="width: 30%">
        <table class="generalTable">
          <tbody>
            <th class="generalTh"> current </th>
            <th class="generalTh"> old </th>
            <tr>
              <td class="generalTd"> includeExpiredData </td>
              <td class="generalTd"> showDeprovisionedBalances, showAllCreditsInDetail </td>
            </tr>
            <tr>
              <td class="generalTd"> excludeReservationsFromCreditTotal </td>
              <td class="generalTd"> doNotDebitReservedAmtFromCreditElementAmt </td>
            </tr>
            <tr>
              <td class="generalTd">   </td>
              <td class="generalTd"> showDetailedInformation, showNextRefreshListInDetail, and showDefinedQuotaCodeListInDetail are always set to true </td>
            </tr>
          </tbody>
        </table>
      </div>

    <h4>Old Parameters Behavior</h4>
    <ul>
      <li>showDetailedInformation: if true, it will return lists of the currently valid credits for each account balance.</li>
      <li>showAllCreditsInDetail: if true then all credits, including expired credits will be returned. Only valid when showDetailedInformation is set to true.</li>
      <li>showDefinedQuotaCodeListInDetail: if true, displays of a list of all quota codes whether they have currently valid credits or not. Only valid when showDetailedInformation is set to true.</li>
      <li>showDeprovisionedBalances: if true, displays all account balances of the subscriber whether they are currently active or deprovisioned. Normally only active account balances are displayed.</li>
      <li>doNotDebitReservedAmtFromCreditElementAmt: if true, then credits listed do not have the amount of pending reservations deducted from the credit amount, only actually debited amounts are used in the calculation. Reservation amounts are listed separately.</li>
      <li>showNextRefreshListInDetail: if true, then a list of the next refresh dates for recurring quotas will be returned. Only valid when showDetailedInformation is set to true.</li>
    </ul>

    <h4>Auto Rollover</h4>
    <p>For Recurring Quota that has Auto Rollover setup, there are additional values that get returned with the Rollover Credit objects. These fields are
    there to assist portals display the proper values for when credit expires. For example, the Recurring Quota refreshes each month, but the Rollover is valid for 2 months
    from the time of rollover which means that the credit is valid for a total of 3 months. Technically according to the system, there is a credit associated to the
    Recurring Quota valid for 1 month and then a credit associated to the Rollover Quota that is valid for 2 months. However, for the subscriber, credit is valid for 3 months.
    To properly display when the rollover credit expires, the response must include the template data.</p>
    <ul>
    <li>rolloverPeriodAmount</li>
    <li>rolloverPeriodUnits</li>
    <li>rolloverExpirationDate</li>
    <li>rolloverTemplateName</li>
    </ul>
  </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
 {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryBalanceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <includeExpiredData>true</includeExpiredData>
      <excludeReservationsFromCreditTotal>true</excludeReservationsFromCreditTotal>
    </QueryBalanceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="includeExpiredData" type="xsd:boolean"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="excludeReservationsFromCreditTotal" type="xsd:boolean"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="QueryBalanceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryBalanceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <balance>
      </balance>
    </QueryBalanceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="100" minOccurs="0" name="balance" type="BalanceType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- RolloverCreditRequest -->
  <xsd:element name="RolloverCreditRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API operates the same as the old MsBM API. It marks a current credit to be rolled over on the next refresh
        date, and immediately rolls over an expired credit. It can do this even for recurring quota types that are not
        specifically set to rollover quota for other subscribers.</p>

      <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Recurring Quota</strong>
                <br/>
                Please note that a Rollover Quota must be specificed on the Recurring Quota template in order for this API to work.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
      </xsd:documentation>
    </xsd:annotation>

    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <RolloverCreditRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <balanceCode>DATA</balanceCode>
      <quotaCode>Recurring</quotaCode>
      <creditId>1</creditId>
      <rollover>true</rollover>
    </RolloverCreditRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="balanceCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The balanceCode field indicates for which configured balance to rollover the credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="quotaCode" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The quotaCode field indicates for which configured quota to rollover the credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="creditId" type="xsd:string">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The creditId field is the unique identifier of the credit object. To determine this
                  value, use QueryBalanceRequest.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="1" name="rollover" type="xsd:boolean">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  The rollover field indicates if this credit is now permanently a rollover credit.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="RolloverCreditResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <RolloverCreditResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </RolloverCreditResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- UpdateBalanceRequest -->
  <!-- UpdateBalance handles several Balance APIs
       DeProvisionBalance
       CreateSubscriberThreshold
       RemoveSubscriberThreshold
       UpdateSubscriberThreshold
       this API should also allow for updating Subscriber Threshold objects (may require Balance code changes - need to check)
       NOTE: ChangeRecurringRefresh should not be done via this API
       NOTE: RemoveQuota should not be done via this API
       because UpdateBalance should not allow users to mess with Quota manually (need to make Balance code changes
       to make sure that Quota cannot be altered via the UpdateBalance API - we have done this for the Credential APIs and it is easy to do)
       -->
  <xsd:element name="UpdateBalanceRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API updates non-calculated data fields on a subscriber's balance. Similar to <a class="doclink" href="#element_UpdateSubscriberRequest">UpdateSubscriberRequest</a> this API is not incremental; meaning an entire balance object must be sent.</p>
        <p>This API replaces several old MsBM APIs</p>

        <ul>
          <li>DeProvisionBalance</li>
          <li>ModifyAccountBalanceProvisionStatus</li>
          <li>CreateSubscriberThreshold</li>
          <li>RemoveSubscriberThreshold</li>
          <li>UpdateSubscriberThreshold</li>
        </ul>
        <p>Only subscriber specific thresholds can be managed via this API. Any global thresholds configured in Policy Builder must be updated through the Policy Builder.</p>
         <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Breached and Amount</strong>
                <br/>
                The amount field for a threshold is the amount at which the threshold gets triggered. If the threshold is in a breached state according to the Balance engine,
                the amount field cannot be updated!
              </td>
            </tr>
          </tbody>
        </table>
      </div>

    <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>What This API Does NOT Do!</strong>
                <br/>
This API will not handle ChangeRecurringRefresh or ChangeBillCycle or ChangeBalanceSubscriberId or DeleteQuota or DeleteCredit because UpdateBalance does not allow users to adjust Quota values manually. This would have dire consequences on the integrity of the data.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Removed Elements</strong>
                <br/>
The nextRefreshDate and avp elements in a threshold have been removed because they are not used by the Balance module.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="panelMacro">
        <table class="infoMacro">
          <tbody>
            <tr>
              <td class="infoImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>The proper steps to use this API:</strong>
                <br/>
					1. Call GetSubscriber or QueryBalance API to get the balance object.<br/>
					2. Update returned balance object as required.<br/>
					3. Call UpdateBalance API with updated balance object.<br/>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
       </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateBalanceRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <balance>
        <code>DATA</code>
        <deprovisioned>true</deprovisioned>
        <depleted>true</depleted>
        <startDate>2011-01-01T00:00:00Z</startDate>
        <expirationDate>2012-01-01T00:00:00Z</expirationDate>
        <quota>
          <code>TopUp</code>
          <threshold>
            <code>THRESHUPDATE</code>
            <amount>70</amount>
            <quotaCode>TopUp</quotaCode>
            <type>Percentage</type>
            <breached>false</breached>
            <subscriberSpecific>true</subscriberSpecific>
          </threshold>
        </quota>
        <threshold>
          <code>THRESHUPDATE</code>
          <amount>70</amount>
          <type>Percentage</type>
          <breached>false</breached>
          <subscriberSpecific>true</subscriberSpecific>
        </threshold>
      </balance>
    </UpdateBalanceRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="100" minOccurs="1" name="balance" type="BalanceType">
              <!--
              <xsd:annotation>
                <xsd:documentation>
                  A complete balance object. Typically this will be the balance returned from
                  a QueryBalanceRequest. Please note that if a subscriber specific threshold is
                  breached, the amount value returned is the breached value not the trigger amount.
                </xsd:documentation>
              </xsd:annotation>
              -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="UpdateBalanceResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <UpdateBalanceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </UpdateBalanceResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- END BALANCE APIS -->
  <!-- BEGIN VOUCHER APIS -->
  <!-- CreateVoucherRequest -->
  <xsd:element name="CreateVoucherRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API adds a voucher to the system.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateVoucherRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
         <audit>
            <id>username</id>
            <comment>comment</comment>
         </audit>
         <voucher>
            <code>voucher</code>
            <pin>pin</pin>
            <maxConcurrentSessions>5</maxConcurrentSessions>
            <duration>10</duration>
            <durationMeasure>Minutes</durationMeasure>
            <serviceCode>serviceCode</serviceCode>
            <expirationDate>2012-01-01T00:00:00Z</expirationDate>
            <locationCode>location</locationCode>
            <timeQuota>10</timeQuota>
            <timeMeasure>timemeasure</timeMeasure>
         </voucher>
    </CreateVoucherRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="voucher" type="VoucherType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="CreateVoucherResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateVoucherResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </CreateVoucherResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- CreateVouchersRequest -->
  <xsd:element name="CreateVouchersRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API adds multiple vouchers to the system.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateVouchersRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <voucher>
        ...
      </voucher>
      <voucher>
        ...
      </voucher>
    </CreateVouchersRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="100" minOccurs="1" name="voucher" type="VoucherType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="CreateVouchersResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <CreateVouchersResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </CreateVouchersResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- QNS-1545 DeleteVoucherBatchRequest -->
  <xsd:element name="DeleteVoucherBatchRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API deletes a batch of vouchers from the system.</p>
          <p>The API uses a code and/or pin value with maskChars to match the vouchers to delete.
            The code and pin values are ‘mask’ values which define a range of values to
            match.</p>
          <p>See the code and pin and maskChars fields in the <a class="doclink" href="#type_VoucherBatchKeyType">VoucherBatchKeyType</a> for more information.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteVoucherBatchRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
         <audit>
            <id>username</id>
            <comment>comment</comment>
         </audit>
         <key>
           <voucherBatchKey>
             <code>codeMask****</code>
             <pin>pinMask####</pin>
             <maskChars>abcd1234</maskChars>
           </voucherBatchKey>
         </key>
    </DeleteVoucherBatchRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="key" type="VoucherKeyType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- QNS-1545 -->
  <xsd:element name="DeleteVoucherBatchResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteVoucherBatchResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteVoucherBatchResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- DeleteVoucherRequest -->
  <xsd:element name="DeleteVoucherRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API deletes a voucher from the system.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <DeleteVoucherRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
        <audit>
          <id>username</id>
          <comment>comment</comment>
        </audit>
        <code>voucher</code>
      </DeleteVoucherRequest>
   </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="DeleteVoucherResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteVoucherResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteVoucherResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- GenerateVoucherBatchRequest -->
  <xsd:element name="GenerateVoucherBatchRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API generates a batch of vouchers and adds them to the system.</p>
          <p>The API takes a sample voucher object and generates a set of voucher instances based on that sample.
            The code and pin values are ‘mask’ values which define a range of values that
            can be used for each instance.</p>
          <p>See the code and pin fields in the <a class="doclink" href="#type_VoucherType">VoucherType</a> for more information.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GenerateVoucherBatchRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
         <audit>
            <id>username</id>
            <comment>comment</comment>
         </audit>
         <voucher>
            <code>codeMask****</code>
            <pin>pinMask####</pin>
            <maxConcurrentSessions>5</maxConcurrentSessions>
            <duration>10</duration>
            <durationMeasure>Minutes</durationMeasure>
            <serviceCode>serviceCode</serviceCode>
            <expirationDate>2012-01-01T00:00:00Z</expirationDate>
            <locationCode>location</locationCode>
            <timeQuota>10</timeQuota>
            <timeMeasure>timemeasure</timeMeasure>
            <balanceCode>balanceCode</balanceCode>
            <quotaCode>quotaCode</quotaCode>
         </voucher>
         <batchAmount>100</batchAmount>
         <maskChars>abcd1234</maskChars>
    </GenerateVoucherBatchRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="voucher" type="VoucherType"/>
            <xsd:element maxOccurs="1" minOccurs="1" name="batchAmount">
              <xsd:simpleType>
                <xsd:restriction base="xsd:integer">
                  <xsd:minInclusive value="1"/>
                  <xsd:maxInclusive value="1000"/>
                </xsd:restriction>
              </xsd:simpleType>
            </xsd:element>
            <xsd:element maxOccurs="1" minOccurs="0" name="maskChars" type="xsd:string">
            <!--
        <xsd:annotation>
          <xsd:documentation>
            The character range to use for generating codes and pins. For example, abcd1234. This will restrict the code and pin values to all combinations of abcd and 1234.
            Please note that the maskChars value is position specific - letters first and then numbers. Example Good: abcd1234. Example Bad: 1234abcd.
            The default values the API uses are: bcdfghjkmnpqrstvwxyzBCDFGHJKMNPQRSTVWXYZ 0123456789 - all numbers and all letters except vowels and the letter L.
          </xsd:documentation>
        </xsd:annotation>
          -->
            </xsd:element>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="GenerateVoucherBatchResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GenerateVoucherBatchResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </GenerateVoucherBatchResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- QueryVoucherRequest -->
  <xsd:element name="QueryVoucherRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API retrieves vouchers.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryVoucherRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
     <audit>
       <id>username</id>
       <comment>comment</comment>
     </audit>
     <key>
       <voucherLocationKey>
         <locationCode>location</locationCode>
         <active>true</active>
       </voucherLocationKey>
     </key>
    </QueryVoucherRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="key" type="VoucherKeyType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="QueryVoucherResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryVoucherResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <voucher>
        <code>voucher</code>
        <pin>pin</pin>
        <maxConcurrentSessions>5</maxConcurrentSessions>
        <duration>10</duration>
        <durationMeasure>Minutes</durationMeasure>
        <serviceCode>serviceCode</serviceCode>
        <expirationDate>2012-01-01T00:00:00Z</expirationDate>
        <locationCode>location</locationCode>
        <timeQuota>10</timeQuota>
        <timeMeasure>timemeasure</timeMeasure>
        <balanceCode>balanceCode</balanceCode>
        <quotaCode>quotaCode</quotaCode>
      </voucher>
      <voucher>
      ...
      </voucher>
    </QueryVoucherResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="1000" minOccurs="0" name="voucher" type="VoucherType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- RedeemVoucherRequest -->
  <xsd:element name="RedeemVoucherRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API redeems a voucher for a subscriber. It marks the voucher as redeemed and sets up the subscriber with the appropriate services and quota based on
          the data stored in the voucher. The code and pin are used to match a specific voucher instance.</p>
          <p>The code and pin are added as a credential to the subscriber.</p>
          <div class="panelMacro">
            <table class="warningMacro">
              <tbody>
                <tr>
                  <td class="warningImage">
                      <!-- image goes here -->
                    </td>
                  <td>
                    <strong>No New Subscriber</strong>
                    <br/>
                    This API does not create a new subscriber unless the subscriber element is included in the request.
                    This means that the api assumes the subscriber already exists in the SPR database unless there is a
                    subscriber element included in the request. If the subscriber element is included in the request, the
                    API attempts to create the subscriber and will error if the credential already exists in the SPR database.
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <RedeemVoucherRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
        <audit>
          <id>username</id>
          <comment>comment</comment>
        </audit>
        <networkId>uniqueIdentifier</networkId>
        <code>voucher</code>
        <pin>voucher</pin>
        <subscriber>
        ...
        </subscriber>
      </RedeemVoucherRequest>
   </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
            <xsd:element maxOccurs="1" minOccurs="1" name="pin" type="xsd:string"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="subscriber" type="SubscriberType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="RedeemVoucherResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <RedeemVoucherResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </RedeemVoucherResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- END VOUCHER APIS -->
  <!-- BEGIN AUDIT APIS -->
  <!-- AuditRequest -->
  <xsd:element name="AuditRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API adds an entry to the Audit History. See <a class="doclink" href="#doc_AuditHistory">Audit History</a> and <a class="doclink" href="#type_AuditType">AuditType</a> for more information.</p>
        </div>
        <div xmlns="http://www.w3.org/1999/xhtml" class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                <!-- image goes here -->
              </td>
              <td>
                <strong>AuditRequests</strong>
                <br/>
        As a consequence of the XSS defense changes to the API standard operation, any XML data sent in an AuditRequest must be properly escaped even if
        inside CDATA tags. For example, &amp;lt;ExampleRequest&amp;gt;...&amp;lt;/ExampleRequest&amp;gt;
        See <a class="doclink" href="#doc_AuditHistory">Audit History</a> for more information.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
    {EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AuditRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <id>csrusername</id>
      <comment>comment</comment>
      <timestamp>2011-01-01T00:00:00Z</timestamp>
      <request>ExampleRequest</request>
      <dataid>subscriber@gmail.com</dataid>
      <data><![CDATA[<ExampleRequest>...</ExampleRequest>]]></data>
    </AuditRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="AuditResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AuditResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </AuditResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- PurgeAuditHistoryRequest -->
  <xsd:element name="PurgeAuditHistoryRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API purges the Audit History. See <a class="doclink" href="#doc_AuditHistory">Audit History</a> for more information.</p>
        <p>The query is very flexible - it uses regex automatically for the id and dataid, and only one of the following are required: id, dataid, or request.
          The dataid element typically will be the networkId (Credential) value of a subscriber.</p>
        <p>The id element is the person or application who made the API request. For example, if a CSR logs into Control Center and queries a subscriber balance, the id will be that CSR's username.</p>
        <p>The dataid element is typically the subscriber's username. For example, if a CSR logs into Control Center and queries a subscriber, the id will be that CSR's username, and the dataid will be the subscriber's credential (networkId value). For queries, the dataid value is checked for spaces and then tokenized and each word is used as a search parameter. For example, "networkId1 networkId2" is interpreted as two values to check.</p>
        <p>The fromDate represents the date in the past from which to start the purge or query. If the date is null, the api starts at the oldest entry in the history.</p>
        <p>The toDate represents the date in the past to which the purge or query of data includes. If the date is null, the api includes the most recent entry in the purge or query.</p>

      <div class="panelMacro">
        <table class="warningMacro">
          <tbody>
            <tr>
              <td class="warningImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Size-Capped Database</strong>
                <br/>
                If the database is capped by size, then the purge request ignores the request key values and drops the entire database due to restrictions of the database software.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
       </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <PurgeAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <id>username</id>
        <dataid>subscriber</dataid>
        <request>API Name</request>
        <fromDate>2011-01-01T00:00:00Z</fromDate>
        <toDate>2011-01-01T00:00:00Z</toDate>
      </key>
    </PurgeAuditHistoryRequest>
  </se:Body>
</se:Envelope>

To purge all CreateSubscriberRequest:

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <PurgeAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <request>CreateSubscriberRequest</request>
      </key>
    </PurgeAuditHistoryRequest>
  </se:Body>
</se:Envelope>

To purge all CreateSubscriberRequest by CSR:

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <PurgeAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <id>csrusername</id>
        <request>CreateSubscriberRequest</request>
      </key>
    </PurgeAuditHistoryRequest>
  </se:Body>
</se:Envelope>

To purge all actions by CSR for a given subscriber for a date range:

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <PurgeAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <id>csrusername</id>
        <dataid>subscriber@gmail.com</dataid>
        <fromDate>2010-01-01T00:00:00Z</fromDate>
        <toDate>2012-11-01T00:00:00Z</toDate>
      </key>
    </PurgeAuditHistoryRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element maxOccurs="1" minOccurs="1" name="key" type="AuditKeyType"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="PurgeAuditHistoryResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <PurgeAuditHistoryResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </PurgeAuditHistoryResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- QueryAuditHistoryRequest -->
  <xsd:element name="QueryAuditHistoryRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API queries the Audit History. See <a class="doclink" href="#doc_AuditHistory">Audit History</a> for more information.</p>
        <p>The query is very flexible - it uses regex automatically for the id and dataid, and only one of the following are required: id, dataid, or request.
          The dataid element typically will be the networkId (Credential) value of a subscriber.</p>
        <p>The id element is the person or application who made the API request. For example, if a CSR logs into Control Center and queries a subscriber balance, the id will be that CSR's username.</p>
        <p>The dataid element is typically the subscriber's username. For example, if a CSR logs into Control Center and queries a subscriber, the id will be that CSR's username, and the dataid will be the subscriber's credential (networkId value). For queries, the dataid value is checked for spaces and then tokenized and each word is used as a search parameter. For example, "networkId1 networkId2" is interpreted as two values to check.</p>
        <p>The fromDate represents the date in the past from which to start the purge or query. If the date is null, the api starts at the oldest entry in the history.</p>
        <p>The toDate represents the date in the past to which the purge or query of data includes. If the date is null, the api includes the most recent entry in the purge or query.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <id>username</id>
        <dataid>subscriber</dataid>
        <request>API Name</request>
        <fromDate>2011-01-01T00:00:00Z</fromDate>
        <toDate>2011-01-01T00:00:00Z</toDate>
      </key>
    </QueryAuditHistoryRequest>
  </se:Body>
</se:Envelope>

To find all CreateSubscriberRequest:

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <request>CreateSubscriberRequest</request>
      </key>
    </QueryAuditHistoryRequest>
  </se:Body>
</se:Envelope>

To find all CreateSubscriberRequest by CSR:

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <id>csrusername</id>
        <request>CreateSubscriberRequest</request>
      </key>
    </QueryAuditHistoryRequest>
  </se:Body>
</se:Envelope>

To find all actions by CSR for a given subscriber for a date range:

<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryAuditHistoryRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <key>
        <id>csrusername</id>
        <dataid>subscriber@gmail.com</dataid>
        <fromDate>2010-01-01T00:00:00Z</fromDate>
        <toDate>2012-11-01T00:00:00Z</toDate>
      </key>
    </QueryAuditHistoryRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element maxOccurs="1" minOccurs="1" name="key" type="AuditKeyType"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="QueryAuditHistoryResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <QueryAuditHistoryResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <audit>
      </audit>
    </QueryAuditHistoryResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="1000" minOccurs="0" name="audit" type="AuditType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- END AUDIT APIS -->

  <!-- ==============================  US4248 Start SSID SPR extension APIS ==============================  -->

  <!-- AddSubscriberSsidsRequest -->
  <xsd:element name="AddSubscriberSsidsRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>This API adds SSID details to a subscriber in SPR SSID extension collection.</p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddSubscriberSsidsRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      <audit>
      <networkId>subscriber credential used for provisioning the subscriber to SPR</networkId>
      <subscriberSsid>
        <ssidKey>UniqueIdentifier</ssidKey>
        <ssid>ssid</ssid>
        <accessType>accessType</accessType>
        <authType>Authentication Type</authType>
        <username>Username</username>
        <password>Password</password>
        <loginUrl>URL for login</loginUrl>
        <configUrl>details</configUrl>
        <verficationCertUrl>details</verficationCertUrl>
        <configMessage>details</configMessage>
        <portalFailMessage>details</portalFailMessage>
        <unmanagedVpnConnectPrompt>details</unmanagedVpnConnectPrompt>
        <unmanagedVpnDisconnectPrompt>details</unmanagedVpnDisconnectPrompt>
      </subscriberSsid>
      <subscriberSsid>
        <ssidKey>UniqueIdentifier</ssidKey>
        <ssid>ssid</ssid>
        ...
        <unmanagedVpnDisconnectPrompt>details</unmanagedVpnDisconnectPrompt>
      </subscriberSsid>
    </AddSubscriberSsidsRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="BaseRequestNetworkIdType">
              <xsd:sequence>
                <xsd:element maxOccurs="40" minOccurs="1" name="subscriberSsid" type="SsidType"/>
              </xsd:sequence>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>

      <xsd:element name="AddSubscriberSsidsResponse">
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <AddSubscriberSsidsResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </AddSubscriberSsidsResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="ResponseType">
              <xsd:sequence/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>

    <!-- DeleteSubscriberSsidRequest -->
      <xsd:element name="DeleteSubscriberSsidRequest">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
              <p>This API deletes all the SSIDs for the given subscriber from the SSID extension collection.</p>
            </div>
          </xsd:documentation>
        </xsd:annotation>
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteSubscriberSsidRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      <audit>
      <networkId>the credential id of the provisioned subscriber whose records have to be deleted from Subscriber SSID extention table</networkId>
    </DeleteSubscriberSsidRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="BaseRequestNetworkIdType">
              <xsd:sequence/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>

      <xsd:element name="DeleteSubscriberSsidResponse">
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <DeleteSubscriberSsidResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </DeleteSubscriberSsidResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="ResponseType">
              <xsd:sequence/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>

  <!--  GetSubscriberSsidsRequest -->

   <xsd:element name="GetSubscriberSsidsRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
      <p>This API retrieves a subscriber from the USuM database.</p>
      <div class="panelMacro">
        <table class="noteMacro">
          <tbody>
            <tr>
              <td class="noteImage">
                  <!-- image goes here -->
                </td>
              <td>
                <strong>Success Response</strong>
                <br/>
          The GetSubscriberSsids API returns error code 0 (success) even if no subscriber is found.
              </td>
            </tr>
          </tbody>
        </table>
      </div>

    </div>
      </xsd:documentation>
    </xsd:annotation>
      <!--
      <xsd:annotation>
        <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetSubscriberSsidsRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
    </GetSubscriberSsidsRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
        </xsd:documentation>
      </xsd:annotation>
      -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
      </xsd:complexType>
     </xsd:element>

  <xsd:element name="GetSubscriberSsidsResponse">
       <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetSubscriberSsidsResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <subscriberSsids>
      ...
      </subscriberSsids>
    </GetSubscriberSsidsResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="subscriber" type="SubscriberSSIDType"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>


  <!--  RemoveSubscriberSsidRequest -->

  <xsd:element name="RemoveSubscriberSsidRequest">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This API removes a subscriber SSID from the SPR extension collection.</p>
    </div>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <RemoveSubscriberSsidRequest xmlns="http://broadhop.com/unifiedapi/soap/types">
      <audit>
        <id>username</id>
        <comment>comment</comment>
      </audit>
      <networkId>uniqueIdentifier</networkId>
      <ssidKey>keyOfSSid<ssidKey>
    </RemoveSubscriberSsidRequest>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
     </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestNetworkIdType">
          <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" name="ssidKey" type="xsd:string"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="RemoveSubscriberSsidResponse">
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <RemoveSubscriberSsidResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
    </RemoveSubscriberSsidResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>

  <!--  US4248 End SSID SPR extension APIS -->


  <!-- GetRefDataServicesRequest -->
  <xsd:element name="GetRefDataServicesRequest">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
              <p>This API retrieves a list of the services and their top level attributes defined in the reference data.</p>
            </div>
          </xsd:documentation>
        </xsd:annotation>
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetRefDataServicesRequest xmlns="http://broadhop.com/unifiedapi/soap/types"/>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- GetRefDataServicesResponse -->
  <xsd:element name="GetRefDataServicesResponse">
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetRefDataServicesResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>0</errorCode>
      <errorMessage>Request completed successfully</errorMessage>
      <refDataService>
        <name>100 Megabit Service</name>
        <code>100Mbit</code>
        <addToSubAccounts>false</addToSubAccounts>
        <balanceService>true</balanceService>
        <enabled>true</enabled>
        <suppressInPortal>true</suppressInPortal>
      </refDataService>
      <refDataService>
        <name>default</name>
        <code>myservice</code>
        <addToSubAccounts>false</addToSubAccounts>
        <balanceService>true</balanceService>
        <enabled>true</enabled>
        <suppressInPortal>true</suppressInPortal>
      </refDataService>
    </GetRefDataServicesResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="ResponseType">
              <xsd:sequence>
                <xsd:element maxOccurs="100" minOccurs="0" name="refDataService" type="RefDataServiceType"/>
              </xsd:sequence>
            </xsd:extension>
          </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- GetRefDataBalanceRequest -->
  <xsd:element name="GetRefDataBalanceRequest">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
              <p>This API retrieves a list of the balance templates, quota templates, and associated ref data thresholds
              and the values defined on the templates in the reference data.</p>
            </div>
          </xsd:documentation>
        </xsd:annotation>
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GetRefDataBalanceRequest xmlns="http://broadhop.com/unifiedapi/soap/types"/>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="BaseRequestAuditType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- GetRefDataBalanceResponse -->
  <xsd:element name="GetRefDataBalanceResponse">
        <!--
        <xsd:annotation>
          <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
   <se:Body>
      <GetRefDataBalanceResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
         <errorCode>0</errorCode>
         <errorMessage>Request completed successfully</errorMessage>
         <refDataBalanceTemplate>
            <code>VOUCHER-TIME</code>
            <description/>
            <quotaUnits>Second</quotaUnits>
            <refDataQuotaTemplate>
               <code>VOUCHER</code>
               <amount>0</amount>
            </refDataQuotaTemplate>
         </refDataBalanceTemplate>
         <refDataBalanceTemplate>
            <code>VOUCHER-DATA</code>
            <description/>
            <quotaUnits>Byte</quotaUnits>
            <refDataQuotaTemplate>
               <code>VOUCHER</code>
               <amount>0</amount>
            </refDataQuotaTemplate>
         </refDataBalanceTemplate>
         <refDataBalanceTemplate>
            <code>QNS_DATA</code>
            <description>Default data balance</description>
            <quotaUnits>Byte</quotaUnits>
            <refDataQuotaTemplate>
               <code>QNS_DATA</code>
               <amount>0</amount>
            </refDataQuotaTemplate>
         </refDataBalanceTemplate>
         <refDataBalanceTemplate>
            <code>QNS_TIME</code>
            <description/>
            <quotaUnits>Second</quotaUnits>
            <refDataQuotaTemplate>
               <code>QNS_TIME</code>
               <amount>0</amount>
            </refDataQuotaTemplate>
         </refDataBalanceTemplate>
         <refDataBalanceTemplate>
            <code>DATA</code>
            <description/>
            <quotaUnits>Byte</quotaUnits>
            <refDataQuotaTemplate>
               <code>onetime</code>
               <amount>100</amount>
               <refDataThreshold>
                  <code>50Percent</code>
                  <amount>50</amount>
                  <thresholdType>Percentage</thresholdType>
                  <triggerOnRemaining>false</triggerOnRemaining>
               </refDataThreshold>
            </refDataQuotaTemplate>
            <refDataQuotaTemplate>
               <description>monthly quota</description>
               <code>monthly</code>
               <amount>100</amount>
               <refDataThreshold>
                  <code>25Percent</code>
                  <amount>25</amount>
                  <thresholdType>Percentage</thresholdType>
                  <triggerOnRemaining>true</triggerOnRemaining>
               </refDataThreshold>
            </refDataQuotaTemplate>
         </refDataBalanceTemplate>
      </GetRefDataBalanceResponse>
   </se:Body>
</se:Envelope>{EXAMPLE_END}
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="ResponseType">
              <xsd:sequence>
                <xsd:element maxOccurs="1000" minOccurs="0" name="refDataBalanceTemplate" type="RefDataBalanceTemplateType"/>
              </xsd:sequence>
            </xsd:extension>
          </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <!-- GenericErrorResponse -->
  <xsd:element name="GenericErrorResponse">
    <xsd:annotation>
      <xsd:documentation>
        <p>This response is sent back for all known errors related to the function and health of the API
          server itself rather than errors returning from the operation of the APIs.</p>
      </xsd:documentation>
    </xsd:annotation>
    <!--
    <xsd:annotation>
      <xsd:documentation>
{EXAMPLE}<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">
  <se:Body>
    <GenericErrorResponse xmlns="http://broadhop.com/unifiedapi/soap/types">
      <errorCode>6</errorCode>
      <errorMessage>Invalid Request: CannotResolveClassException</errorMessage>
    </GenericErrorResponse>
  </se:Body>
</se:Envelope>{EXAMPLE_END}
      </xsd:documentation>
    </xsd:annotation>
    -->
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:extension base="ResponseType">
          <xsd:sequence/>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:complexType name="SubscriberType">
    <xsd:complexContent>
      <xsd:extension base="UserType">
        <xsd:sequence>
          <xsd:element maxOccurs="1" minOccurs="0" name="version" type="xsd:integer">
            <!--
        <xsd:annotation>
          <xsd:documentation>
            Do not edit the version field. It is used by the server to ensure data integrity.
          </xsd:documentation>
        </xsd:annotation>
          -->
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="realm" type="xsd:string">
            <!--
        <xsd:annotation>
          <xsd:documentation>
            The realm field can be used to store domain information related to the subscriber.
            For example, broadhop.com.
          </xsd:documentation>
        </xsd:annotation>
          -->
          </xsd:element>
          <xsd:element maxOccurs="1000" minOccurs="0" name="subAccount" type="UserType">
            <!--
        <xsd:annotation>
          <xsd:documentation>
            A subaccount represents a system user that is related to the subscriber. For example, a subscriber\'s
            child. The child\'s information or profile can be stored as a subAccount object on the subscriber
            object in the database.
          </xsd:documentation>
        </xsd:annotation>
          -->
          </xsd:element>
          <!-- added -->
          <xsd:element maxOccurs="10" minOccurs="0" name="createBalance" type="CreateBalanceType"/>
          <!-- added -->
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BillingInfoType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="chargingId" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The chargingId field is used as a correlation id value between Balance and USuM.
            The default correlation is the USuM id (generated by the database). If a chargingId is
            set on the subscriber, the chargingId value becomes the correlation id.
            Please note that the UpdateSubscriber API does not/cannot change the chargingId/Balance
            SubscriberId relationship. To make such a change you must use the ChangeBalanceSubscriberId API.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="ratePlanCode" type="xsd:string"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="NameType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="fullName">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The fullName field is designed to take any person\'s name. Instead of managing separate
            fields for each potential part of a person\'s name, this field encompasses the entire name.
            The name is parsed into a Array of Strings in the system based on the spaces between the words
            which allows for better search indexing in the database. For example, Andres Arturo Garcia Menendez
            is stored like this [ \"Andres\", \"Arturo\", \"Garcia\", \"Menendez\" ] in the database
            so that searches can be done against each portion of the name
            rather than trying to determine what is the Surname, Middle name, given name, etc.
            \'&amp;, $, <\' are invalid characters. See XSS - Cross Site Scripting Defense for more information.
          </xsd:documentation>
        </xsd:annotation>
          -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[^$&amp;&lt;]*"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="StatusType">
    <!--
    <xsd:annotation>
      <xsd:documentation>
        The status field is used to indicate the active state of the subscriber. CPS checks this
        value when authenticating a subscriber during session start.
      </xsd:documentation>
    </xsd:annotation>
      -->
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="ACTIVE"/>
        <xsd:enumeration value="DELETED"/>
        <xsd:enumeration value="SUSPENDED"/>
        <xsd:enumeration value="INACTIVE"/>
      </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="UserType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The id field is the database unique identifier. Do not edit the id field for any reason.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parentId" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The parentId field is the database unique identifier. Do not edit the parentId field for any reason.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="name" type="NameType"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="authType">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="NONE"/>
            <xsd:enumeration value="BASIC"/>
            <xsd:enumeration value="DIGEST"/>
            <xsd:enumeration value="SIMPLE"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="authUsername" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="authPassword" type="xsd:string"/>
      <xsd:element maxOccurs="20" minOccurs="1" name="credential" type="CredentialType"/>
      <xsd:element maxOccurs="20" minOccurs="0" name="service" type="ServiceType"/>
      <xsd:element maxOccurs="10" minOccurs="0" name="notification" type="NotificationType"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="session" type="SessionType"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="balance" type="BalanceType"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="status" type="StatusType"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="startDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="endDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="role">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="READ_ALL"/>
            <xsd:enumeration value="READ_SELF"/>
            <xsd:enumeration value="WRITE_ALL"/>
            <xsd:enumeration value="WRITE_SELF"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="externalId">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The externalId field can be used to store a unique identifier for at third party system.
          </xsd:documentation>
        </xsd:annotation>
          -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value=".{0,100}"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="billingInfo" type="BillingInfoType"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="CredentialType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="networkId" type="xsd:string">
          <!--
          <xsd:annotation>
            <xsd:documentation>
              The networkId is a unique string value that identifies the subscriber. This can be any
              value such as MSISDN, MAC Address, IP Address, IMPI, Email Address, Telephone number, etc.
            </xsd:documentation>
          </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="password" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="type" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The type field is a convenience field that is used to identify the
            credential type such as MSISDN, MAC Address, IP Address, IMPI, etc.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="description" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The description field is a convenience field that can provide additional
            information about the type of credential.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="expirationDate" type="xsd:dateTime">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The expirationDate field is checked by CPS whenever a subscriber is loaded from
            the database. Expired credentials are automatically removed from the subscriber
            object. A subscriber must have at least one credential, and if the one remaining
            credential is expired, the subscriber will not be allowed onto the system.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ServiceType">
        <xsd:annotation>
          <xsd:documentation>
            A service indicates what service CPS should provision to a subscriber and contains any special
              custom data that helps CPS determine what to provision.
          </xsd:documentation>
        </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The code field is the name of the service.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="enabled" type="xsd:boolean"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            Use AVPs to customize a service definition for a subscriber. See the AvpType for more information.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="10" minOccurs="0" name="schedule" type="ScheduleType">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            Use the schedule fields to customize a subscriber\'s allowed times for service.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="NotificationType">
        <xsd:annotation>
          <xsd:documentation>
            A notification is a holder for subscriber messaging data.
          </xsd:documentation>
        </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="destination" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="enabled" type="xsd:boolean"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="transport">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="SMS"/>
            <xsd:enumeration value="EMAIL"/>
            <xsd:enumeration value="APPLE_PUSH"/>
            <xsd:enumeration value="GCM"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="AvpType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="value" type="xsd:string"/>
      <!-- CSCvb56017 this is here only for ChangeSubscriberAvps and UpdateService modifiedAvp -->
      <xsd:element maxOccurs="1" minOccurs="0" name="newValue" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The newValue element is only used in the ChangeSubscriberAvps
            and UpdateService APIs.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ScheduleType">
        <xsd:annotation>
          <xsd:documentation>
            A schedule is a holder for a cron-like time structure that customizes service (de)activation. See <a class="doclink" href="#doc_ServicesAndServiceSchedules">Services and Service Schedules</a> for more information.
          </xsd:documentation>
        </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="startDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="endDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="state">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="ON"/>
            <xsd:enumeration value="OFF"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="startTime">
        <!--
        <xsd:annotation>
          <xsd:documentation>The startTime format is HH:MM.</xsd:documentation>
        </xsd:annotation>
          -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[0-9]{2,2}:[0-9]{2,2}"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="endTime">
        <!--
        <xsd:annotation>
          <xsd:documentation>The endTime format is HH:MM.</xsd:documentation>
        </xsd:annotation>
          -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[0-9]{2,2}:[0-9]{2,2}"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="repeat" type="RepeatType"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="enabled" type="xsd:boolean"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="RepeatType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="dayOfMonth">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[\-,0-9\*\?LW/]*"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="month">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[\-,0-9\*A-Z/]*"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dayOfWeek">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[\-,0-9\*\?L#/]*"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="year">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[\-,0-9\*/]*"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ExecuteActionResponseType">
    <xsd:annotation>
      <xsd:documentation>
        The ExecuteActionResponseType is a catch all object that translates data into a map of
        key:value pairs. Therefore, from deployment to deployment, an ExecuteActionResponseType
        can look different.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" minOccurs="0" name="responseObject" type="MapType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SessionType">
    <xsd:annotation>
      <xsd:documentation>
        Similar to the <a class="doclink" href="#type_ExecuteActionResponseType">ExecuteActionResponseType</a> a SessionType is a map of key:value pairs.
        CPS is very flexible and allows for many session configurations. Therefore, all data is
        structured as a map of key:value pairs. Therefore, from deployment to deployment, a session
        can look different.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="sessionKey" type="SessionKeyType"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" name="sessionObject" type="MapType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="MapType">
    <xsd:sequence>
      <xsd:element maxOccurs="unbounded" minOccurs="0" name="entry" type="EntryType"/>
    </xsd:sequence>
  </xsd:complexType>
  <!-- CSCui74591 -->
  <!-- to maintain compatibility with 2.0 xml
  A choice is added so that the key element can be named string or key.
  A value element of type xsd:anyType is added to the original value choice element.
  the anyType will help guard against future schema issues with session objects.
  Once the time limit for deprecation has passed, the choice elements will be removed
  and just the key and value elements will remain. The ListType will also get removed.
  -->
  <xsd:complexType name="EntryType">
    <xsd:sequence>
      <xsd:choice maxOccurs="1">
        <xsd:element name="string" type="xsd:string"/>
        <!-- CSCui74591 -->
        <xsd:element name="key" type="xsd:string"/>
      </xsd:choice>
      <xsd:choice maxOccurs="1">
        <xsd:element name="list" type="ListType"/>
        <xsd:element name="linked-list" type="ListType"/>
        <xsd:element name="map" type="MapType"/>
        <xsd:element name="string" type="xsd:string"/>
        <xsd:element name="boolean" type="xsd:boolean"/>
        <xsd:element name="int" type="xsd:integer"/>
        <xsd:element name="long" type="xsd:long"/>
        <xsd:element name="date" type="xsd:dateTime"/>
        <xsd:element name="byte-array" type="xsd:base64Binary"/>
        <!-- CSCui74591 -->
        <xsd:element name="value" type="xsd:anyType"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ListType">
    <xsd:sequence>
      <xsd:choice maxOccurs="unbounded" minOccurs="1">
        <xsd:element name="map" type="MapType"/>
        <xsd:element name="string" type="xsd:string"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="BaseRequestNetworkIdType">
    <xsd:complexContent>
      <xsd:extension base="BaseRequestAuditType">
        <xsd:sequence>
          <xsd:element maxOccurs="1" minOccurs="1" name="networkId" type="xsd:string">
            <!--
            <xsd:annotation>
              <xsd:documentation>
                The networkId is a unique string value that identifies the subscriber. This can be any
                value such as MSISDN, MAC Address, IP Address, IMPI, Email Address, Telephone number, etc.
              </xsd:documentation>
            </xsd:annotation>
            -->
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- US4248 new types for SSID SPR extension table -->

  <xsd:complexType name="SsidType">
        <xsd:sequence>
          <xsd:element maxOccurs="1" minOccurs="1" name="ssidKey" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="ssid" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="accessType" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="authType" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="username" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="password" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="loginUrl" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="configUrl" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="verficationCertUrl" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="configMessage" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="portalFailMessage" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="unmanagedVpnConnectPrompt" type="xsd:string"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="unmanagedVpnDisconnectPrompt" type="xsd:string"/>
        </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SubscriberSSIDType">
        <xsd:sequence>
          <xsd:element maxOccurs="1" minOccurs="1" name="subscriberId" type="xsd:string"/>
          <xsd:element maxOccurs="40" minOccurs="0" name="ssidList" type="SsidType"/>
        </xsd:sequence>
  </xsd:complexType>

  <!--  US4248 end -->

  <xsd:complexType name="BaseRequestAuditType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="audit" type="AuditType">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The audit element is used for logging which APIs were called and who called them.
            It is part of the enhanced security features of CPS.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ResponseType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="errorCode">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The errorCode field is used to indicate whether an API request completed successfully or not.
            See the Error Codes section in the documentation for a list of codes and related messages.
          </xsd:documentation>
        </xsd:annotation>
          -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:integer">
            <xsd:minInclusive value="0"/>
            <xsd:maxExclusive value="1000"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="errorMessage" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The errorMessage field is used to provide more information about the reason an API
            request failed. See the Error Codes section in the documentation for a list of codes
            and related messages.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SessionKeyType">
    <xsd:annotation>
      <xsd:documentation>
        A sessionKey is used to find sessions in the session cache.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The typical <strong>key</strong> codes are:<br/>
            UserIdKey, USuMSubscriberIdKey, USuMCredentialKey, and MSBMSubscriberIdKey<br/>
            <br/>
            The corresponding <strong>keyField</strong> codes are:<br/>
            userId, usumSubscriberId, networkId,and msbmSubscriberId
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="primary" type="xsd:boolean"/>
      <xsd:element maxOccurs="20" minOccurs="0" name="keyField" type="KeyFieldType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="KeyFieldType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="value" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SearchType">
    <xsd:sequence>
      <xsd:choice maxOccurs="1" minOccurs="0">
        <xsd:element name="name" type="NameType"/>
        <xsd:element name="networkId" type="xsd:string"/>
      </xsd:choice>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="CreateBalanceType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The code field is the name of the Balance to provision to the subscriber.
            Balance templates are configured in the Policy Builder.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="quotaCode" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The quotaCode field is the name of the Quota to provision to the subscriber.
            Quotas are configured in Policy Builder.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="startDate" type="xsd:dateTime">
      <!--
        <xsd:annotation>
          <xsd:documentation>
            The startDate field is the date when the credit which will be created by this API becomes effective.
             If not specified, the start date defaults to current date and time.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="expirationDate" type="xsd:dateTime">
      <!--
        <xsd:annotation>
          <xsd:documentation>
            The expirationDate field is the date when the credit which will be created by this API expires.
            Even if there is an amount remaining, the expirationDate overrides and does not allow it to be used.
             If not specified, the expiration date defaults to current date and time + the recurrence period.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="initialAmount" type="xsd:long"/>
      <xsd:element maxOccurs="10" minOccurs="0" name="threshold" type="ThresholdType"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="lastRecurringRefresh" type="xsd:dateTime">
      <!--
        <xsd:annotation>
          <xsd:documentation>
            The lastRecurringRefresh field is the date used to calculate when to refresh recurring quota.
            Therfore, when creating quota with the CreateBalance API, set this date to the day when the
            refresh would have occurred had the quota existed. For example, if the CreateBalanceRequest is
            sent on 01/01/2012 at 08:00:00 and the intention is to have the quota refresh on the 28th
            of the month, then the LRR (lastRecurringRefresh) should be set to 28/12/2011T00:00:00 (December
            28, 2011) for the request. The Balance engine uses the LRR to calculate the next refresh date, so
            by setting the LRR to December 28th (the previous month in relation to the provision) the new refresh
            date of January 28th, 2012 will be calculated correctly. Please note that months have a variable amount
            days and will refresh accordingly.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="billCycle">
       <!--
        <xsd:annotation>
          <xsd:documentation>
            COMPATIBILITY: Bill Cycle is only supported when used with MsBM/Balance 2.3.0 and higher.
            The billCycle field is an integer value between 1 and 31 inclusively that specifies the day of
            the month that BillCycle recurring quotas for the subscriber should expire and refresh. It is an optional
            field when BillCycle recurring quotas are not being used. It is required when provisioning a new BillCycle
            recurring quota. If a bill cycle value already exists on a subscriber\'s account, the value passed in MUST
            match the existing value or an error will be returned.
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:integer">
            <xsd:minInclusive value="1"/>
            <xsd:maxInclusive value="31"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="recurrenceLimit">
        <!--
        <xsd:annotation>
          <xsd:documentation>
          	The recurrenceLimit field is an integer that represents the maximum number of times that a recurring quota will refresh for a subscriber.
          	If set, the recurrenceLimit field overrides the recurrenceLimit value configured for the quota template in Policy Builder.
          	Just like the value in the Policy Builder, if set to 0, a recurring quota will refresh \"infintely\", that is for as long as the account is active in the system.
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:integer">
            <xsd:minInclusive value="1"/>
            <xsd:maxInclusive value="1000"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="quotaExpirationDate" type="xsd:dateTime">
        <!--
        <xsd:annotation>
          <xsd:documentation>
	        The quotaExpirationDate is a date field that defines when a recurring quota will stop refreshing for a given subscriber.
	        Like the recurrenceLimit for a quota template in Policy Builder and the recurrenceLimit field that applies to a specific subscriber,
	        the quotaExpirationDate provides a mechanism to effectively terminate a recurring quota for a subscriber at a specific date.
	        If set, the quotaExpirationDate field overrides the recurrenceLimit field set on the subscriber.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- QNS-1653 -->
  <xsd:complexType name="ExtendCreditType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="balanceCode" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="quotaCode" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="creditId" type="xsd:string">
          <!--
          <xsd:annotation>
            <xsd:documentation>
            The creditId field is optional. To guarantee that the disired credit is
            extended it is recommended to send in this field. However, the API will
            attempt to find the best credit to alter, based on priority and expiration
            date.
            </xsd:documentation>
          </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="add" type="xsd:boolean">
          <!--
          <xsd:annotation>
            <xsd:documentation>
            The add field is false by default. If add == true, then the date and/or amount
            is added to (extended). If add == false, then the date and/or amount is replaced.
            The values used for addition or replacement are the endDate, minutes, and amount
            fields.
            </xsd:documentation>
          </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="endDate" type="xsd:dateTime">
          <!--
          <xsd:annotation>
            <xsd:documentation>
            The add field controls the behavior of the endDate, minutes, and amount fields.
            If add == false, then those fields are used to replace the existing
            data in the credit. If add == true, then the field values are added to the
            existing values. endDate and minutes are mutually exclusive. Since it is not
            possible to add dates in Java, endDate is the replacement value, and minutes is the
            addition value.
            </xsd:documentation>
          </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="minutes">
        <!--
          <xsd:annotation>
            <xsd:documentation>
            The add field controls the behavior of the endDate, minutes, and amount fields.
            If add == false, then those fields are used to replace the existing
            data in the credit. If add == true, then the field values are added to the
            existing values. endDate and minutes are mutually exclusive. Since it is not
            possible to add dates in Java, endDate is the replacement value, and minutes is the
            addition value.
            </xsd:documentation>
          </xsd:annotation>
          -->
          <xsd:simpleType>
            <xsd:restriction base="xsd:integer">
              <xsd:minInclusive value="1"/>
            </xsd:restriction>
          </xsd:simpleType>
        </xsd:element>
        <xsd:element maxOccurs="1" minOccurs="0" name="amount">
        <!--
          <xsd:annotation>
            <xsd:documentation>
            The add field controls the behavior of the endDate, minutes, and amount fields.
            If add == false, then those fields are used to replace the existing
            data in the credit. If add == true, then the field values are added to the
            existing values. endDate and minutes are mutually exclusive. Since it is not
            possible to add dates in Java, endDate is the replacement value, and minutes is the
            addition value.
            </xsd:documentation>
          </xsd:annotation>
          -->
          <xsd:simpleType>
            <xsd:restriction base="xsd:long">
              <xsd:minInclusive value="1"/>
            </xsd:restriction>
          </xsd:simpleType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- QNS-1634 -->
  <xsd:complexType name="DeleteBalanceType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The code field is the name of the Balance to delete from the subscriber.
            Balance templates are configured in the Policy Builder.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="quotaCode" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The quotaCode field is the name of the Quota to delete from the subscriber.
            Quotas are configured in Policy Builder.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="BalanceType">
    <xsd:annotation>
      <xsd:documentation>
        A balance is the top-level object that represents a subscriber's balance (amount of time, data, or bandwidth) that can be used.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="deprovisioned" type="xsd:boolean">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The deprovisioned field indicates if the balance is active. Most often a balance
            is deprovisioned rather than removed from the system to maintain accounting and historical
            records.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="depleted" type="xsd:boolean"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="billCycle">
       <!--
        <xsd:annotation>
          <xsd:documentation>
            COMPATIBILITY: Bill Cycle is only supported when used with MsBM/Balance 2.3.0 and higher.
            The billCycle field is an integer value between 1 and 31 inclusively that specifies the day of
            the month that BillCycle recurring quotas for the subscriber should expire and refresh. It is an optional
            field when BillCycle recurring quotas are not being used. It is required when provisioning a new BillCycle
            recurring quota. If a bill cycle value already exists on a subscriber\'s account, the value passed in MUST
            match the existing value or an error will be returned.
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:integer">
            <xsd:minInclusive value="1"/>
            <xsd:maxInclusive value="31"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1000" minOccurs="0" name="quota" type="QuotaType"/>
      <xsd:element maxOccurs="10" minOccurs="0" name="threshold" type="ThresholdType"/>
      <xsd:element maxOccurs="1000" minOccurs="0" name="reservation" type="ReservationType"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="startDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="expirationDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="totals" type="TotalsType"/>
      <!-- added -->
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="QuotaType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" name="credit" type="CreditType"/>
      <xsd:element maxOccurs="10" minOccurs="0" name="threshold" type="ThresholdType"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="nextRefreshDate" type="xsd:dateTime"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="recurrenceLimit" type="xsd:integer"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="quotaExpirationDate" type="xsd:dateTime"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="totals" type="TotalsType"/>
      <!-- added -->
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="TotalsType">
        <xsd:annotation>
          <xsd:documentation>
            The totals object is a convenience field showing a quick summary of the
            debited, reserved, and available amounts for the balance.
          </xsd:documentation>
        </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="balance" type="xsd:decimal"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="reserved" type="xsd:decimal"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="debited" type="xsd:decimal"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="CreditType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="id" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="initialAmount" type="xsd:long"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="amount" type="xsd:long"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="reservedAmount" type="xsd:long"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="startDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="expirationDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="valid" type="xsd:boolean"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="rolloverPeriodAmount" type="xsd:integer"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="rolloverPeriodUnits">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="Minute"/>
            <xsd:enumeration value="Hour"/>
            <xsd:enumeration value="Day"/>
            <xsd:enumeration value="Week"/>
            <xsd:enumeration value="Month"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="rolloverExpirationDate" type="xsd:dateTime">
      <!--
        <xsd:annotation>
          <xsd:documentation>
            The rolloverExpirationDate value indicates the date when any quota
            from the current recurring bucket will expire if it is rolled over.
            This value is valid only when Auto-Rollover is configured
            for Quota templates.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="rolloverTemplateName" type="xsd:string"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ThresholdType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="amount" type="xsd:long"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="0" name="quotaCode" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="type">
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="Percentage"/>
            <xsd:enumeration value="Bytes"/>
            <xsd:enumeration value="Kilobytes"/>
            <xsd:enumeration value="Megabytes"/>
            <xsd:enumeration value="Gigabytes"/>
            <xsd:enumeration value="Other"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="group" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="breached" type="xsd:boolean">
      <!--
        <xsd:annotation>
          <xsd:documentation>
            The breached boolean should always be false for new subscriber thresholds,
            and should be left as is when retrieved from the system for updating
            subscriber thresholds. The Balance engine needs to know if a breach state is
            ongoing or new to send the correct notifications. Please note if breached == true,
            the amount value for a subscriber specific threshold cannot be changed.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="subscriberSpecific" type="xsd:boolean"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ReservationType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="id" type="xsd:string"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="1" name="amount" type="xsd:long"/>
      <!-- added -->
      <xsd:element maxOccurs="1" minOccurs="1" name="expirationDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ReturnCreditType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="id" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="nextRefreshDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="balanceRemaining" type="xsd:long"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="amountCredited" type="xsd:long"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="callbackValidityTime" type="xsd:dateTime"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ReturnDebitType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="nextRefreshDate" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="balanceRemaining" type="xsd:long"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="amountDebited" type="xsd:long"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="callbackValidityTime" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="exhausted" type="xsd:boolean"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="VoucherType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            When used in the GenerateVoucherBatch API, this is a &#8216;mask&#8217;.
            For example, July####. This tells the GenerateVoucherBatch API to create
            code values that start with July and then have 4 numbers - e.g. July2134.
            2012???? tells the API to create code values that start with 2012 and then have 4
            random letters - e.g. 2012gbcd. # = number, ? = letter, and * = either. Please note
            that wildcards should not be mixed. Example Bad: #?#?. Please note that masks can only contain a prefix.
            Example Good: July??? or July#### or *****. Example Bad: ???July.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="pin" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            When used in the GenerateVoucherBatch API, this is a &#8216;mask&#8217;.
            For example, July####. This tells the GenerateVoucherBatch API to create
            pin values that start with July and then have 4 numbers - e.g. July2134.
            2012???? tells the API to create pin values that start with 2012 and then have 4
            random letters - e.g. 2012gbcd. # = number, ? = letter, and * = either. Please note
            that wildcards should not be mixed. Example Bad: #?#?. Please note that masks can only contain a prefix.
            Example Good: July??? or July#### or *****. Example Bad: ???July.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="subscriberId" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            A networkId associated with the voucher.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="maxConcurrentSessions" type="xsd:integer">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            Sets the number of internet sessions one voucher login can have.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="duration" type="xsd:long">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The time limit for which a voucher instance is valid. For example, a voucher
            is valid for 1 Month or 24 Hours.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="durationMeasure">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The units for determining the duration: Minutes, Hours, Days, Weeks, and Months.
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="Minutes"/>
            <xsd:enumeration value="Hours"/>
            <xsd:enumeration value="Days"/>
            <xsd:enumeration value="Weeks"/>
            <xsd:enumeration value="Months"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="serviceCode" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The service code that will get provisioned onto a subscriber when the voucher is
            redeemed.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="expirationDate" type="xsd:dateTime">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The date when this voucher expires after which it cannot be used to validate
            services/quota.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="locationCode" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The location code of where this voucher is valid. Must match the Location configuration in
            Policy Builder.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="timeQuota" type="xsd:long">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            Use timeQuota and timeMeasure as values to override the default settings for a Quota
            configured in Policy Builder. If you are setting timeQuota and timeMeasure, do not set
            volumeQuota and volumeMeasure.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="timeMeasure" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            Use timeQuota and timeMeasure as values to override the default settings for a Quota
            configured in Policy Builder. If you are setting timeQuota and timeMeasure, do not set
            volumeQuota and volumeMeasure.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="volumeQuota" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            Use volumeQuota and volumeMeasure as values to override the default settings for a Quota
            configured in Policy Builder. If you are setting volumeQuota and volumeMeasure, do not set
            timeQuota and timeMeasure.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="volumeMeasure" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            Use volumeQuota and volumeMeasure as values to override the default settings for a Quota
            configured in Policy Builder. If you are setting volumeQuota and volumeMeasure, do not set
            timeQuota and timeMeasure.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="balanceCode" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The balance code that will get provisioned for a subscriber when the voucher is
            redeemed.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="quotaCode" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The quota code that will get provisioned for a subscriber when the voucher is
            redeemed.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="VoucherKeyType">
    <xsd:sequence>
      <xsd:choice maxOccurs="1">
        <xsd:element name="voucherCode" type="xsd:string"/>
        <xsd:element name="networkId" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The networkId is a unique string value that identifies the subscriber. This can be any
            value such as MSISDN, MAC Address, IP Address, IMPI, Email Address, Telephone number, etc.
          </xsd:documentation>
        </xsd:annotation>
        -->
        </xsd:element>
        <xsd:element name="voucherLocationKey" type="VoucherLocationKeyType"/>
        <xsd:element name="voucherBatchKey" type="VoucherBatchKeyType"/>
      </xsd:choice>
      <xsd:element maxOccurs="1" minOccurs="0" name="skip">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The skip element is used for pagination. It indicates how many records to skip in the results
            set. For example, query 1 skip == 0. Query 2 skip == 100. Query 3 skip == 200, etc. As long
            as the query matches the same total set each time, using skip would then return the next group
            of 100 records. ((pageNumber-1) x pageLimit) is a common way to calculate the skip value.
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:integer">
            <xsd:minInclusive value="0"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="limit">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The limit element is used for pagination. It indicates how many records to return from the results
            set which equals 1 page of records. ((pageNumber-1) x pageLimit) is a common way to calculate the
            skip value.
          </xsd:documentation>
        </xsd:annotation>
        -->
        <xsd:simpleType>
          <xsd:restriction base="xsd:integer">
            <xsd:minInclusive value="1"/>
            <xsd:maxInclusive value="1000"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="VoucherLocationKeyType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="locationCode" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The location code of where this voucher is valid. Must match the Location configuration in
            Policy Builder.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="active" type="xsd:boolean"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="VoucherBatchKeyType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            When used in the QueryVoucher and DeleteVoucherBatch APIs, this is a &#8216;mask&#8217;.
            For example, July####. This tells the API to match
            code values that start with July and then have 4 numbers - e.g. July2134.
            2012???? tells the API to match code values that start with 2012 and then have 4
            random letters - e.g. 2012gbcd. # = number, ? = letter, and * = either. Please note
            that wildcards should not be mixed. Example Bad: #?#?. Please note that masks can only contain a prefix.
            Example Good: July??? or July#### or *****. Example Bad: ???July.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="pin" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            When used in the QueryVoucher and DeleteVoucherBatch APIs, this is a &#8216;mask&#8217;.
            For example, July####. This tells the API to match
            pin values that start with July and then have 4 numbers - e.g. July2134.
            2012???? tells the API to match pin values that start with 2012 and then have 4
            random letters - e.g. 2012gbcd. # = number, ? = letter, and * = either. Please note
            that wildcards should not be mixed. Example Bad: #?#?. Please note that masks can only contain a prefix.
            Example Good: July??? or July#### or *****. Example Bad: ???July.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="maskChars" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The character range to use for matching codes and pins. For example, abcd1234. This will restrict the code and pin values to all combinations of abcd and 1234.
            Please note that the maskChars value is position specific - letters first and then numbers. Example Good: abcd1234. Example Bad: 1234abcd.
            The default values the API uses are: bcdfghjkmnpqrstvwxyzBCDFGHJKMNPQRSTVWXYZ 0123456789 - all numbers and all letters except vowels and the letter L.
          </xsd:documentation>
        </xsd:annotation>
        -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="AuditType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="id" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The id field is the person or application who made the request.
            For example, if a CSR logs into Control Center and creates a subscriber, the id in the audit will be that CSR\'s username.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="comment" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The comment field provides a mechanism to store additional information about the action performed.
            For example, if a user checks in a change on the Policy Builder, the comment added for the check in
            automatically populates the comment field for the AuditRequest.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="timestamp" type="xsd:dateTime"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="request" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The request field provides more flexibility for searching the audit logs. Since most operations are API requests, the
            request field is populated with the name of the API.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataid" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The dataid field provides for another layer of granularity. Typically, this field is the
            networkId (Credential) of the subscriber. For example, if a CSR logs into Control Center and
            creates a subscriber, the dataid in the audit will be the credential of the newly created subscriber.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="data" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The data field stores the entire XML string of any API request. It should be used to send any
            payload that needs to be stored as part of the audit history.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="100" minOccurs="0" name="avp" type="AvpType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="AuditKeyType">
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The id field is the person or application who made the request.
            For example, if a CSR logs into Control Center and creates a subscriber, the id in the audit will be that CSR\'s username.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataid" type="xsd:string">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The dataid field provides for another layer of granularity. Typically, this field is the
            networkId (Credential) of the subscriber. For example, if a CSR logs into Control Center and
            creates a subscriber, the dataid in the audit will be the credential of the newly created subscriber.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="request" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="fromDate" type="xsd:dateTime">
        <!--
        <xsd:annotation>
          <xsd:documentation>
            The fromDate represents the date in the past from which to start the purge or query.
            If the date is null, the API starts at the oldest entry in the history.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="toDate" type="xsd:dateTime">
      <!--
        <xsd:annotation>
          <xsd:documentation>
            The toDate represents the date to which the purge or query of data includes.
            If the date is null, the API includes the most recent entry in the purge or query.
          </xsd:documentation>
        </xsd:annotation>
          -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- RefDataServiceType -->
  <xsd:complexType name="RefDataServiceType">
    <xsd:annotation>
      <xsd:documentation>
      A ref data service is a reference data object defined in Policy Builder that defines the top level values defined for a service.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="name" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="addToSubAccounts" type="xsd:boolean">
      <!--
      <xsd:annotation>
        <xsd:documentation>
        The addToSubAccounts field indicates whether the service should be applied to sub accounts.
        </xsd:documentation>
      </xsd:annotation>
      -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="balanceService" type="xsd:boolean">
      <!--
      <xsd:annotation>
        <xsd:documentation>
        The balanceService field indicates if the service utilizes MsBM, that is, it involves
        balance and quota information and tracking.
        </xsd:documentation>
      </xsd:annotation>
      -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="enabled" type="xsd:boolean">
      <!--
      <xsd:annotation>
        <xsd:documentation>
        The enabled field indicates if the service is enabled for use.
        </xsd:documentation>
      </xsd:annotation>
      -->
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="1" name="suppressInPortal" type="xsd:boolean">
      <!--
      <xsd:annotation>
        <xsd:documentation>
        The suppressInPortal field indicates if this service should be displayed in the portal.
        </xsd:documentation>
      </xsd:annotation>
      -->
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!-- RefDataBalanceTemplateType -->
  <xsd:complexType name="RefDataBalanceTemplateType">
    <xsd:annotation>
      <xsd:documentation>
      A ref data balance template is a reference data object defined in Policy Builder that defines an Account Balance for MsBM and also contains any associated Quota and Threshold definitions.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="description" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="quotaUnits" type="xsd:string"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="refDataQuotaTemplate" type="RefDataQuotaTemplateType"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="refDataThreshold" type="RefDataThresholdType"/>
    </xsd:sequence>
  </xsd:complexType>
  <!-- RefDataQuotaTemplateType -->
  <xsd:complexType name="RefDataQuotaTemplateType">
    <xsd:annotation>
      <xsd:documentation>
      A ref data quota template is a reference data object defined in Policy Builder that defines an Quota for MsBM and also contains any associated Threshold definitions.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="description" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="amount" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="priority" type="xsd:integer"/>
      <xsd:element maxOccurs="100" minOccurs="0" name="refDataThreshold" type="RefDataThresholdType"/>
    </xsd:sequence>
  </xsd:complexType>
  <!-- RefDataThresholdType -->
  <xsd:complexType name="RefDataThresholdType">
    <xsd:annotation>
      <xsd:documentation>
      A ref data threshold is a reference data object defined in Policy Builder that defines a threshold on either a Balance or Quota in MsBM.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="1" minOccurs="1" name="code" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="amount" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="thresholdType" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="0" name="group" type="xsd:string"/>
      <xsd:element maxOccurs="1" minOccurs="1" name="triggerOnRemaining" type="xsd:boolean"/>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>
